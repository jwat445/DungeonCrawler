// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Bullet
#include <Bullet.h>
#endif
#ifndef INCLUDED_Coin
#include <Coin.h>
#endif
#ifndef INCLUDED_Enemy
#include <Enemy.h>
#endif
#ifndef INCLUDED_EnemySpitter
#include <EnemySpitter.h>
#endif
#ifndef INCLUDED_EnemyWalker
#include <EnemyWalker.h>
#endif
#ifndef INCLUDED_GameOverState
#include <GameOverState.h>
#endif
#ifndef INCLUDED_HUD
#include <HUD.h>
#endif
#ifndef INCLUDED_Hole
#include <Hole.h>
#endif
#ifndef INCLUDED_Obstacle
#include <Obstacle.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_ogmo_FlxOgmoLoader
#include <flixel/addons/editors/ogmo/FlxOgmoLoader.h>
#endif
#ifndef INCLUDED_flixel_effects_FlxFlicker
#include <flixel/effects/FlxFlicker.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxBaseTilemap
#include <flixel/tile/FlxBaseTilemap.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxTilemap
#include <flixel/tile/FlxTilemap.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_af23706db05c7feb_21_new,"PlayState","new",0xf8bf96cf,"PlayState.new","PlayState.hx",21,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_54_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",54,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_66_buildMap,"PlayState","buildMap",0x02761f3f,"PlayState.buildMap","PlayState.hx",66,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_75_setup,"PlayState","setup",0x39ed2eac,"PlayState.setup","PlayState.hx",75,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_140_placeEntities,"PlayState","placeEntities",0xcb21ad57,"PlayState.placeEntities","PlayState.hx",140,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_175_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",175,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_230_playerTouchCoin,"PlayState","playerTouchCoin",0x7f00763e,"PlayState.playerTouchCoin","PlayState.hx",230,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_240_checkEnemyVision,"PlayState","checkEnemyVision",0xe46dc499,"PlayState.checkEnemyVision","PlayState.hx",240,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_251_playerTouchEnemy,"PlayState","playerTouchEnemy",0xc787e8fb,"PlayState.playerTouchEnemy","PlayState.hx",251,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_258_playerHurt,"PlayState","playerHurt",0x33f1ad81,"PlayState.playerHurt","PlayState.hx",258,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_267_doneFadeOut,"PlayState","doneFadeOut",0xf3a9b17f,"PlayState.doneFadeOut","PlayState.hx",267,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_272_moveRoom,"PlayState","moveRoom",0x9d29e0fd,"PlayState.moveRoom","PlayState.hx",272,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_311_shoot,"PlayState","shoot",0x3be5020e,"PlayState.shoot","PlayState.hx",311,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_318_bulletHitMap,"PlayState","bulletHitMap",0x3db4899c,"PlayState.bulletHitMap","PlayState.hx",318,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_324_bulletHitEnemy,"PlayState","bulletHitEnemy",0xe87a5148,"PlayState.bulletHitEnemy","PlayState.hx",324,0xb30d7781)

void PlayState_obj::__construct( ::Dynamic MaxSize){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_21_new)
HXLINE(  47)		this->playerHealth = (int)3;
HXLINE(  46)		this->money = (int)0;
HXLINE(  28)		this->floorY = (int)4;
HXLINE(  27)		this->floorX = (int)4;
HXLINE(  21)		super::__construct(MaxSize);
            	}

Dynamic PlayState_obj::__CreateEmpty() { return new PlayState_obj; }

void *PlayState_obj::_hx_vtable = 0;

Dynamic PlayState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PlayState_obj > _hx_result = new PlayState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool PlayState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x2335d9a7) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2335d9a7;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x3634c52c || inClassId==(int)0x46c2835d;
	}
}

void PlayState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_54_create)
HXLINE(  55)		this->player =  ::Player_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  56)		this->roomClear = true;
HXLINE(  57)		::Array< ::Dynamic> _g = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(  57)		{
HXLINE(  57)			int _g1 = (int)0;
HXDLIN(  57)			while((_g1 < (int)9)){
HXLINE(  57)				_g1 = (_g1 + (int)1);
HXDLIN(  57)				int x = (_g1 - (int)1);
HXDLIN(  57)				::Array< ::String > _g2 = ::Array_obj< ::String >::__new(0);
HXDLIN(  57)				{
HXLINE(  57)					int _g3 = (int)0;
HXDLIN(  57)					while((_g3 < (int)9)){
HXLINE(  57)						_g3 = (_g3 + (int)1);
HXDLIN(  57)						int y = (_g3 - (int)1);
HXDLIN(  57)						_g2->push(HX_("assets/data/room000.oel",44,3c,15,dc));
            					}
            				}
HXDLIN(  57)				_g->push(_g2);
            			}
            		}
HXDLIN(  57)		this->floorMap = _g;
HXLINE(  58)		this->buildMap();
HXLINE(  59)		this->setup(this->floorMap->__get(this->floorX).StaticCast< ::Array< ::String > >()->__get(this->floorY),(int)0);
HXLINE(  60)		::flixel::FlxG_obj::camera->follow(this->player,::flixel::FlxCameraFollowStyle_obj::TOPDOWN_dyn(),(int)1);
HXLINE(  61)		this->sndHurt = ::flixel::FlxG_obj::sound->load(HX_("assets/sounds/hurt.wav",6c,32,7c,8f),null(),null(),null(),null(),null(),null(),null());
HXLINE(  62)		this->super::create();
            	}


void PlayState_obj::buildMap(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_66_buildMap)
HXLINE(  68)		this->floorMap->__get((int)4).StaticCast< ::Array< ::String > >()[(int)4] = HX_("assets/data/room001.oel",c5,d0,7b,6f);
HXLINE(  69)		this->floorMap->__get((int)5).StaticCast< ::Array< ::String > >()[(int)4] = HX_("assets/data/room002.oel",46,65,e2,02);
HXLINE(  70)		this->floorMap->__get((int)5).StaticCast< ::Array< ::String > >()[(int)5] = HX_("assets/data/room003.oel",c7,f9,48,96);
HXLINE(  71)		this->floorMap->__get((int)4).StaticCast< ::Array< ::String > >()[(int)5] = HX_("assets/data/room004.oel",48,8e,af,29);
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,buildMap,(void))

void PlayState_obj::setup( ::Dynamic path, ::Dynamic direction){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_75_setup)
HXLINE(  76)		this->map =  ::flixel::addons::editors::ogmo::FlxOgmoLoader_obj::__alloc( HX_CTX ,path);
HXLINE(  77)		this->mWalls = this->map->loadTilemap(HX_("assets/images/tiles.png",35,bc,d1,f5),(int)32,(int)32,HX_("walls",29,0c,1f,c5));
HXLINE(  78)		this->mWalls->follow(null(),null(),null());
HXLINE(  79)		this->mWalls->setTileProperties((int)0,(int)0,null(),null(),null());
HXLINE(  80)		this->mWalls->setTileProperties((int)1,(int)0,null(),null(),null());
HXLINE(  81)		this->mWalls->setTileProperties((int)2,(int)4369,null(),null(),null());
HXLINE(  82)		this->add(this->mWalls);
HXLINE(  84)		this->grpHoles =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  85)		this->add(this->grpHoles);
HXLINE(  86)		this->grpObstacles =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  87)		this->add(this->grpObstacles);
HXLINE(  89)		this->grpCoins =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  90)		this->add(this->grpCoins);
HXLINE(  91)		this->sndCoin = ::flixel::FlxG_obj::sound->load(HX_("assets/sounds/coin.wav",ee,74,61,6a),null(),null(),null(),null(),null(),null(),null());
HXLINE(  93)		this->grpEnemies =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  94)		this->add(this->grpEnemies);
HXLINE(  96)		this->player =  ::Player_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  97)		this->map->loadEntities(this->placeEntities_dyn(),HX_("entities",41,96,95,92));
HXLINE(  98)		this->add(this->player);
HXLINE( 100)		this->hud =  ::HUD_obj::__alloc( HX_CTX );
HXLINE( 101)		this->add(this->hud);
HXLINE( 103)		this->grpBullets =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 104)		this->add(this->grpBullets);
HXLINE( 105)		this->bulletDelay = (int)10;
HXLINE( 107)		this->mWalls->setTileProperties((int)3,(int)4369,this->moveRoom_dyn(),hx::ClassOf< ::Player >(),null());
HXLINE( 109)		if (hx::IsNull( direction )) {
HXLINE( 132)			this->player->set_x((int)0);
HXLINE( 133)			this->player->set_y((int)0);
HXLINE( 134)			HX_STACK_DO_THROW(HX_("Player direction not specified when entering room",a8,1c,b4,9a));
            		}
            		else {
HXLINE( 109)			 ::Dynamic _hx_switch_0 = direction;
            			if (  (_hx_switch_0==(int)0) ){
HXLINE( 113)				this->player->set_x((int)288);
HXLINE( 114)				this->player->set_y((int)224);
HXLINE( 111)				goto _hx_goto_5;
            			}
            			if (  (_hx_switch_0==(int)1) ){
HXLINE( 117)				this->player->set_x((int)288);
HXLINE( 118)				this->player->set_y((int)64);
HXLINE( 115)				goto _hx_goto_5;
            			}
            			if (  (_hx_switch_0==(int)2) ){
HXLINE( 121)				this->player->set_x((int)512);
HXLINE( 122)				this->player->set_y((int)224);
HXLINE( 119)				goto _hx_goto_5;
            			}
            			if (  (_hx_switch_0==(int)3) ){
HXLINE( 125)				this->player->set_x((int)288);
HXLINE( 126)				this->player->set_y((int)384);
HXLINE( 123)				goto _hx_goto_5;
            			}
            			if (  (_hx_switch_0==(int)4) ){
HXLINE( 129)				this->player->set_x((int)64);
HXLINE( 130)				this->player->set_y((int)224);
HXLINE( 127)				goto _hx_goto_5;
            			}
            			/* default */{
HXLINE( 132)				this->player->set_x((int)0);
HXLINE( 133)				this->player->set_y((int)0);
HXLINE( 134)				HX_STACK_DO_THROW(HX_("Player direction not specified when entering room",a8,1c,b4,9a));
            			}
            			_hx_goto_5:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,setup,(void))

void PlayState_obj::placeEntities(::String entityName, ::Xml entityData){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_140_placeEntities)
HXLINE( 141)		int x = ::Std_obj::parseInt(entityData->get(HX_("x",78,00,00,00)));
HXLINE( 142)		int y = ::Std_obj::parseInt(entityData->get(HX_("y",79,00,00,00)));
HXLINE( 143)		if ((entityName != HX_("player",61,eb,b8,37))) {
HXLINE( 148)			if ((entityName == HX_("coin",91,b5,c4,41))) {
HXLINE( 150)				 ::flixel::group::FlxTypedGroup _hx_tmp = this->grpCoins;
HXDLIN( 150)				_hx_tmp->add( ::Coin_obj::__alloc( HX_CTX ,(x + (int)8),(y + (int)8))).StaticCast<  ::Coin >();
            			}
            			else {
HXLINE( 152)				if ((entityName == HX_("hole",40,c9,12,45))) {
HXLINE( 154)					 ::flixel::group::FlxTypedGroup _hx_tmp1 = this->grpHoles;
HXDLIN( 154)					_hx_tmp1->add( ::Hole_obj::__alloc( HX_CTX ,x,y)).StaticCast<  ::Hole >();
            				}
            				else {
HXLINE( 156)					if ((entityName == HX_("obstacle",4f,ea,05,be))) {
HXLINE( 158)						 ::flixel::group::FlxTypedGroup _hx_tmp2 = this->grpObstacles;
HXDLIN( 158)						_hx_tmp2->add( ::Obstacle_obj::__alloc( HX_CTX ,x,y,entityData->get(HX_("variant",85,40,e2,dc)))).StaticCast<  ::Obstacle >();
            					}
            					else {
HXLINE( 160)						bool _hx_tmp3;
HXDLIN( 160)						bool _hx_tmp4;
HXDLIN( 160)						if ((entityName == HX_("enemy",48,12,7b,70))) {
HXLINE( 160)							_hx_tmp4 = (::Math_obj::abs((this->player->x - x)) > (int)40);
            						}
            						else {
HXLINE( 160)							_hx_tmp4 = false;
            						}
HXDLIN( 160)						if (_hx_tmp4) {
HXLINE( 160)							_hx_tmp3 = (::Math_obj::abs((this->player->y - y)) > (int)40);
            						}
            						else {
HXLINE( 160)							_hx_tmp3 = false;
            						}
HXDLIN( 160)						if (_hx_tmp3) {
HXLINE( 162)							::String _g = entityData->get(HX_("etype",9f,89,81,74));
HXDLIN( 162)							::String _hx_switch_0 = _g;
            							if (  (_hx_switch_0==HX_("head",20,29,0b,45)) ){
HXLINE( 167)								 ::flixel::group::FlxTypedGroup _hx_tmp5 = this->grpEnemies;
HXDLIN( 167)								_hx_tmp5->add( ::EnemySpitter_obj::__alloc( HX_CTX ,(x + (int)8),y,entityData->get(HX_("variant",85,40,e2,dc)))).StaticCast<  ::Enemy >();
HXDLIN( 167)								goto _hx_goto_7;
            							}
            							if (  (_hx_switch_0==HX_("walker",b6,c9,0a,b6)) ){
HXLINE( 165)								 ::flixel::group::FlxTypedGroup _hx_tmp6 = this->grpEnemies;
HXDLIN( 165)								_hx_tmp6->add( ::EnemyWalker_obj::__alloc( HX_CTX ,(x + (int)8),y,entityData->get(HX_("variant",85,40,e2,dc)))).StaticCast<  ::Enemy >();
HXDLIN( 165)								goto _hx_goto_7;
            							}
            							/* default */{
            							}
            							_hx_goto_7:;
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,placeEntities,(void))

void PlayState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_175_update)
HXLINE( 176)		this->super::update(elapsed);
HXLINE( 177)		if ((this->grpEnemies->countLiving() <= (int)0)) {
HXLINE( 179)			this->roomClear = true;
            		}
            		else {
HXLINE( 181)			this->roomClear = false;
            		}
HXLINE( 182)		this->bulletDelay--;
HXLINE( 183)		bool _hx_tmp;
HXDLIN( 183)		if (this->player->shoot()) {
HXLINE( 183)			_hx_tmp = (this->bulletDelay < (int)0);
            		}
            		else {
HXLINE( 183)			_hx_tmp = false;
            		}
HXDLIN( 183)		if (_hx_tmp) {
HXLINE( 185)			this->shoot();
            		}
HXLINE( 188)		if ((this->playerHealth < (int)1)) {
HXLINE( 190)			this->ending = true;
HXLINE( 191)			::flixel::FlxG_obj::camera->fade((int)-16777216,((Float).33),false,this->doneFadeOut_dyn(),null());
            		}
HXLINE( 195)		if ((this->money > (int)9)) {
HXLINE( 197)			this->won = true;
HXLINE( 198)			this->ending = true;
HXLINE( 199)			::flixel::FlxG_obj::camera->fade((int)-16777216,((Float).33),false,this->doneFadeOut_dyn(),null());
            		}
HXLINE( 202)		if (this->ending) {
HXLINE( 204)			return;
            		}
HXLINE( 207)		::flixel::FlxG_obj::overlap(( ( ::flixel::FlxBasic)(this->player) ),( ( ::flixel::FlxBasic)(this->mWalls) ),null(),::flixel::FlxObject_obj::separate_dyn());
HXLINE( 208)		::flixel::FlxG_obj::overlap(( ( ::flixel::FlxBasic)(this->player) ),( ( ::flixel::FlxBasic)(this->grpHoles) ),null(),::flixel::FlxObject_obj::separate_dyn());
HXLINE( 209)		::flixel::FlxG_obj::overlap(( ( ::flixel::FlxBasic)(this->player) ),( ( ::flixel::FlxBasic)(this->grpObstacles) ),null(),::flixel::FlxObject_obj::separate_dyn());
HXLINE( 210)		::flixel::FlxG_obj::overlap(this->player,this->grpCoins,this->playerTouchCoin_dyn(),null());
HXLINE( 211)		::flixel::FlxG_obj::overlap(this->player,this->grpEnemies,this->playerTouchEnemy_dyn(),null());
HXLINE( 212)		::flixel::FlxG_obj::overlap(( ( ::flixel::FlxBasic)(this->player) ),( ( ::flixel::FlxBasic)(this->grpEnemies) ),null(),::flixel::FlxObject_obj::separate_dyn());
HXLINE( 214)		::flixel::FlxG_obj::overlap(( ( ::flixel::FlxBasic)(this->grpEnemies) ),( ( ::flixel::FlxBasic)(this->grpObstacles) ),null(),::flixel::FlxObject_obj::separate_dyn());
HXLINE( 215)		::flixel::FlxG_obj::overlap(( ( ::flixel::FlxBasic)(this->grpEnemies) ),( ( ::flixel::FlxBasic)(this->grpHoles) ),null(),::flixel::FlxObject_obj::separate_dyn());
HXLINE( 216)		::flixel::FlxG_obj::overlap(( ( ::flixel::FlxBasic)(this->grpEnemies) ),( ( ::flixel::FlxBasic)(this->mWalls) ),null(),::flixel::FlxObject_obj::separate_dyn());
HXLINE( 217)		::flixel::FlxG_obj::overlap(( ( ::flixel::FlxBasic)(this->grpEnemies) ),( ( ::flixel::FlxBasic)(this->grpEnemies) ),null(),::flixel::FlxObject_obj::separate_dyn());
HXLINE( 218)		this->grpEnemies->forEachAlive(this->checkEnemyVision_dyn(),null());
HXLINE( 220)		this->hud->updateHUD(this->playerHealth,this->money);
HXLINE( 223)		::flixel::FlxG_obj::overlap(( ( ::flixel::FlxBasic)(this->grpBullets) ),( ( ::flixel::FlxBasic)(this->grpEnemies) ),this->bulletHitEnemy_dyn(),::flixel::FlxObject_obj::separate_dyn());
HXLINE( 224)		::flixel::FlxG_obj::overlap(( ( ::flixel::FlxBasic)(this->grpBullets) ),( ( ::flixel::FlxBasic)(this->mWalls) ),this->bulletHitMap_dyn(),::flixel::FlxObject_obj::separate_dyn());
HXLINE( 225)		::flixel::FlxG_obj::overlap(( ( ::flixel::FlxBasic)(this->grpBullets) ),( ( ::flixel::FlxBasic)(this->grpObstacles) ),this->bulletHitMap_dyn(),::flixel::FlxObject_obj::separate_dyn());
            	}


void PlayState_obj::playerTouchCoin( ::Player P, ::Coin C){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_230_playerTouchCoin)
HXDLIN( 230)		bool _hx_tmp;
HXDLIN( 230)		bool _hx_tmp1;
HXDLIN( 230)		bool _hx_tmp2;
HXDLIN( 230)		if (P->alive) {
HXDLIN( 230)			_hx_tmp2 = P->exists;
            		}
            		else {
HXDLIN( 230)			_hx_tmp2 = false;
            		}
HXDLIN( 230)		if (_hx_tmp2) {
HXDLIN( 230)			_hx_tmp1 = C->alive;
            		}
            		else {
HXDLIN( 230)			_hx_tmp1 = false;
            		}
HXDLIN( 230)		if (_hx_tmp1) {
HXDLIN( 230)			_hx_tmp = C->exists;
            		}
            		else {
HXDLIN( 230)			_hx_tmp = false;
            		}
HXDLIN( 230)		if (_hx_tmp) {
HXLINE( 232)			this->money++;
HXLINE( 233)			this->sndCoin->play(true,null(),null());
HXLINE( 234)			C->kill();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,playerTouchCoin,(void))

void PlayState_obj::checkEnemyVision( ::Enemy e){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_240_checkEnemyVision)
HXDLIN( 240)		 ::flixel::tile::FlxTilemap _hx_tmp = this->mWalls;
HXDLIN( 240)		 ::flixel::math::FlxPoint _hx_tmp1 = e->getMidpoint(null());
HXDLIN( 240)		if (_hx_tmp->ray(_hx_tmp1,this->player->getMidpoint(null()),null(),null())) {
HXLINE( 242)			e->seesPlayer = true;
HXLINE( 243)			{
HXLINE( 243)				 ::flixel::math::FlxPoint _this = e->playerPos;
HXDLIN( 243)				 ::flixel::math::FlxPoint point = this->player->getMidpoint(null());
HXDLIN( 243)				_this->set_x(point->x);
HXDLIN( 243)				_this->set_y(point->y);
HXDLIN( 243)				if (point->_weak) {
HXLINE( 243)					point->put();
            				}
            			}
            		}
            		else {
HXLINE( 246)			e->seesPlayer = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,checkEnemyVision,(void))

void PlayState_obj::playerTouchEnemy( ::Player P, ::EnemyWalker E){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_251_playerTouchEnemy)
HXDLIN( 251)		bool _hx_tmp;
HXDLIN( 251)		bool _hx_tmp1;
HXDLIN( 251)		bool _hx_tmp2;
HXDLIN( 251)		bool _hx_tmp3;
HXDLIN( 251)		if (P->alive) {
HXDLIN( 251)			_hx_tmp3 = P->exists;
            		}
            		else {
HXDLIN( 251)			_hx_tmp3 = false;
            		}
HXDLIN( 251)		if (_hx_tmp3) {
HXDLIN( 251)			_hx_tmp2 = E->alive;
            		}
            		else {
HXDLIN( 251)			_hx_tmp2 = false;
            		}
HXDLIN( 251)		if (_hx_tmp2) {
HXDLIN( 251)			_hx_tmp1 = E->exists;
            		}
            		else {
HXDLIN( 251)			_hx_tmp1 = false;
            		}
HXDLIN( 251)		if (_hx_tmp1) {
HXDLIN( 251)			_hx_tmp = !(::flixel::effects::FlxFlicker_obj::isFlickering(P));
            		}
            		else {
HXDLIN( 251)			_hx_tmp = false;
            		}
HXDLIN( 251)		if (_hx_tmp) {
HXLINE( 253)			this->playerHurt(P);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,playerTouchEnemy,(void))

void PlayState_obj::playerHurt( ::Player P){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_258_playerHurt)
HXLINE( 259)		this->playerHealth--;
HXLINE( 260)		this->sndHurt->play(null(),null(),null());
HXLINE( 261)		::flixel::effects::FlxFlicker_obj::flicker(P,(int)1,((Float)0.04),true,true,null(),null());
HXLINE( 262)		::flixel::FlxG_obj::camera->shake(((Float)0.01),((Float)0.2),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,playerHurt,(void))

void PlayState_obj::doneFadeOut(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_267_doneFadeOut)
HXDLIN( 267)		 ::flixel::FlxState nextState =  ::GameOverState_obj::__alloc( HX_CTX ,this->won,this->money);
HXDLIN( 267)		if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXDLIN( 267)			::flixel::FlxG_obj::game->_requestedState = nextState;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,doneFadeOut,(void))

void PlayState_obj::moveRoom( ::flixel::FlxObject FlxTile, ::flixel::FlxObject player){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_272_moveRoom)
HXDLIN( 272)		if (this->roomClear) {
HXLINE( 274)			int direction = (int)0;
HXLINE( 275)			bool _hx_tmp;
HXDLIN( 275)			bool _hx_tmp1;
HXDLIN( 275)			if ((player->x > (int)300)) {
HXLINE( 275)				_hx_tmp1 = (player->y > (int)100);
            			}
            			else {
HXLINE( 275)				_hx_tmp1 = false;
            			}
HXDLIN( 275)			if (_hx_tmp1) {
HXLINE( 275)				_hx_tmp = (player->y < (int)400);
            			}
            			else {
HXLINE( 275)				_hx_tmp = false;
            			}
HXDLIN( 275)			if (_hx_tmp) {
HXLINE( 277)				direction = (int)4;
HXLINE( 278)				 ::PlayState _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 278)				_hx_tmp2->floorX = (_hx_tmp2->floorX + (int)1);
HXLINE( 279)				::haxe::Log_obj::trace(HX_("moved right",2f,0c,5d,fe),hx::SourceInfo(HX_("PlayState.hx",81,77,0d,b3),279,HX_("PlayState",5d,83,c2,46),HX_("moveRoom",cc,59,66,ee)));
            			}
            			else {
HXLINE( 281)				bool _hx_tmp3;
HXDLIN( 281)				bool _hx_tmp4;
HXDLIN( 281)				if ((player->x < (int)100)) {
HXLINE( 281)					_hx_tmp4 = (player->y > (int)100);
            				}
            				else {
HXLINE( 281)					_hx_tmp4 = false;
            				}
HXDLIN( 281)				if (_hx_tmp4) {
HXLINE( 281)					_hx_tmp3 = (player->y < (int)400);
            				}
            				else {
HXLINE( 281)					_hx_tmp3 = false;
            				}
HXDLIN( 281)				if (_hx_tmp3) {
HXLINE( 283)					direction = (int)2;
HXLINE( 284)					 ::PlayState _hx_tmp5 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 284)					_hx_tmp5->floorX = (_hx_tmp5->floorX - (int)1);
HXLINE( 285)					::haxe::Log_obj::trace(HX_("moved left",14,b3,cc,cb),hx::SourceInfo(HX_("PlayState.hx",81,77,0d,b3),285,HX_("PlayState",5d,83,c2,46),HX_("moveRoom",cc,59,66,ee)));
            				}
            				else {
HXLINE( 287)					bool _hx_tmp6;
HXDLIN( 287)					bool _hx_tmp7;
HXDLIN( 287)					if ((player->y > (int)200)) {
HXLINE( 287)						_hx_tmp7 = (player->x > (int)100);
            					}
            					else {
HXLINE( 287)						_hx_tmp7 = false;
            					}
HXDLIN( 287)					if (_hx_tmp7) {
HXLINE( 287)						_hx_tmp6 = (player->x < (int)400);
            					}
            					else {
HXLINE( 287)						_hx_tmp6 = false;
            					}
HXDLIN( 287)					if (_hx_tmp6) {
HXLINE( 289)						direction = (int)1;
HXLINE( 290)						 ::PlayState _hx_tmp8 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 290)						_hx_tmp8->floorY = (_hx_tmp8->floorY - (int)1);
HXLINE( 291)						::haxe::Log_obj::trace(HX_("moved down",6f,a3,8a,c6),hx::SourceInfo(HX_("PlayState.hx",81,77,0d,b3),291,HX_("PlayState",5d,83,c2,46),HX_("moveRoom",cc,59,66,ee)));
            					}
            					else {
HXLINE( 293)						bool _hx_tmp9;
HXDLIN( 293)						bool _hx_tmp10;
HXDLIN( 293)						if ((player->y < (int)200)) {
HXLINE( 293)							_hx_tmp10 = (player->x > (int)100);
            						}
            						else {
HXLINE( 293)							_hx_tmp10 = false;
            						}
HXDLIN( 293)						if (_hx_tmp10) {
HXLINE( 293)							_hx_tmp9 = (player->x < (int)400);
            						}
            						else {
HXLINE( 293)							_hx_tmp9 = false;
            						}
HXDLIN( 293)						if (_hx_tmp9) {
HXLINE( 295)							direction = (int)3;
HXLINE( 296)							 ::PlayState _hx_tmp11 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 296)							_hx_tmp11->floorY = (_hx_tmp11->floorY + (int)1);
HXLINE( 297)							::haxe::Log_obj::trace(HX_("moved up",28,44,10,fa),hx::SourceInfo(HX_("PlayState.hx",81,77,0d,b3),297,HX_("PlayState",5d,83,c2,46),HX_("moveRoom",cc,59,66,ee)));
            						}
            					}
            				}
            			}
HXLINE( 299)			::haxe::Log_obj::trace(this->floorX, ::Dynamic(hx::Anon_obj::Create(5)
            				->setFixed(0,HX_("className",a3,92,3d,dc),HX_("PlayState",5d,83,c2,46))
            				->setFixed(1,HX_("customParams",d7,51,18,ed),::cpp::VirtualArray_obj::__new(1)->init(0,this->floorY))
            				->setFixed(2,HX_("methodName",cc,19,0f,12),HX_("moveRoom",cc,59,66,ee))
            				->setFixed(3,HX_("fileName",e7,5a,43,62),HX_("PlayState.hx",81,77,0d,b3))
            				->setFixed(4,HX_("lineNumber",dd,81,22,76),(int)299)));
HXLINE( 300)			this->mWalls->kill();
HXLINE( 301)			this->hud->destroy();
HXLINE( 302)			this->grpEnemies->destroy();
HXLINE( 303)			this->grpBullets->destroy();
HXLINE( 304)			this->grpCoins->destroy();
HXLINE( 305)			player->kill();
HXLINE( 306)			this->setup(this->floorMap->__get(this->floorX).StaticCast< ::Array< ::String > >()->__get(this->floorY),direction);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,moveRoom,(void))

void PlayState_obj::shoot(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_311_shoot)
HXLINE( 312)		this->bulletDelay = (int)30;
HXLINE( 313)		 ::Bullet bullet = this->grpBullets->recycle(hx::ClassOf< ::Bullet >(),null(),null(),null()).StaticCast<  ::Bullet >();
HXLINE( 314)		bullet->init(this->player);
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,shoot,(void))

void PlayState_obj::bulletHitMap( ::Bullet bulletRef, ::flixel::FlxObject mapRef){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_318_bulletHitMap)
HXLINE( 319)		bulletRef->kill();
HXLINE( 320)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 320)		::String _hx_tmp1 = (HX_("hit map: ",b5,ee,08,ce) + ::Std_obj::string(mapRef));
HXDLIN( 320)		_hx_tmp(_hx_tmp1,hx::SourceInfo(HX_("PlayState.hx",81,77,0d,b3),320,HX_("PlayState",5d,83,c2,46),HX_("bulletHitMap",eb,15,7f,22)));
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,bulletHitMap,(void))

void PlayState_obj::bulletHitEnemy( ::Bullet bulletRef, ::Enemy enemyRef){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_324_bulletHitEnemy)
HXLINE( 325)		bulletRef->kill();
HXLINE( 326)		enemyRef->damage(bulletRef);
HXLINE( 327)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 327)		::String _hx_tmp1 = (HX_("hit enemy: ",21,fc,b2,c7) + ::Std_obj::string(enemyRef));
HXDLIN( 327)		_hx_tmp(_hx_tmp1,hx::SourceInfo(HX_("PlayState.hx",81,77,0d,b3),327,HX_("PlayState",5d,83,c2,46),HX_("bulletHitEnemy",57,cf,3b,7e)));
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,bulletHitEnemy,(void))


hx::ObjectPtr< PlayState_obj > PlayState_obj::__new( ::Dynamic MaxSize) {
	hx::ObjectPtr< PlayState_obj > __this = new PlayState_obj();
	__this->__construct(MaxSize);
	return __this;
}

hx::ObjectPtr< PlayState_obj > PlayState_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	PlayState_obj *__this = (PlayState_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(PlayState_obj), true, "PlayState"));
	*(void **)__this = PlayState_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

PlayState_obj::PlayState_obj()
{
}

void PlayState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PlayState);
	HX_MARK_MEMBER_NAME(player,"player");
	HX_MARK_MEMBER_NAME(map,"map");
	HX_MARK_MEMBER_NAME(mWalls,"mWalls");
	HX_MARK_MEMBER_NAME(floorMap,"floorMap");
	HX_MARK_MEMBER_NAME(floorX,"floorX");
	HX_MARK_MEMBER_NAME(floorY,"floorY");
	HX_MARK_MEMBER_NAME(roomClear,"roomClear");
	HX_MARK_MEMBER_NAME(sndCoin,"sndCoin");
	HX_MARK_MEMBER_NAME(sndHurt,"sndHurt");
	HX_MARK_MEMBER_NAME(grpCoins,"grpCoins");
	HX_MARK_MEMBER_NAME(grpEnemies,"grpEnemies");
	HX_MARK_MEMBER_NAME(grpBullets,"grpBullets");
	HX_MARK_MEMBER_NAME(grpHoles,"grpHoles");
	HX_MARK_MEMBER_NAME(grpObstacles,"grpObstacles");
	HX_MARK_MEMBER_NAME(bulletDelay,"bulletDelay");
	HX_MARK_MEMBER_NAME(hud,"hud");
	HX_MARK_MEMBER_NAME(money,"money");
	HX_MARK_MEMBER_NAME(playerHealth,"playerHealth");
	HX_MARK_MEMBER_NAME(ending,"ending");
	HX_MARK_MEMBER_NAME(won,"won");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PlayState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(player,"player");
	HX_VISIT_MEMBER_NAME(map,"map");
	HX_VISIT_MEMBER_NAME(mWalls,"mWalls");
	HX_VISIT_MEMBER_NAME(floorMap,"floorMap");
	HX_VISIT_MEMBER_NAME(floorX,"floorX");
	HX_VISIT_MEMBER_NAME(floorY,"floorY");
	HX_VISIT_MEMBER_NAME(roomClear,"roomClear");
	HX_VISIT_MEMBER_NAME(sndCoin,"sndCoin");
	HX_VISIT_MEMBER_NAME(sndHurt,"sndHurt");
	HX_VISIT_MEMBER_NAME(grpCoins,"grpCoins");
	HX_VISIT_MEMBER_NAME(grpEnemies,"grpEnemies");
	HX_VISIT_MEMBER_NAME(grpBullets,"grpBullets");
	HX_VISIT_MEMBER_NAME(grpHoles,"grpHoles");
	HX_VISIT_MEMBER_NAME(grpObstacles,"grpObstacles");
	HX_VISIT_MEMBER_NAME(bulletDelay,"bulletDelay");
	HX_VISIT_MEMBER_NAME(hud,"hud");
	HX_VISIT_MEMBER_NAME(money,"money");
	HX_VISIT_MEMBER_NAME(playerHealth,"playerHealth");
	HX_VISIT_MEMBER_NAME(ending,"ending");
	HX_VISIT_MEMBER_NAME(won,"won");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

hx::Val PlayState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"map") ) { return hx::Val( map ); }
		if (HX_FIELD_EQ(inName,"hud") ) { return hx::Val( hud ); }
		if (HX_FIELD_EQ(inName,"won") ) { return hx::Val( won ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"money") ) { return hx::Val( money ); }
		if (HX_FIELD_EQ(inName,"setup") ) { return hx::Val( setup_dyn() ); }
		if (HX_FIELD_EQ(inName,"shoot") ) { return hx::Val( shoot_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"player") ) { return hx::Val( player ); }
		if (HX_FIELD_EQ(inName,"mWalls") ) { return hx::Val( mWalls ); }
		if (HX_FIELD_EQ(inName,"floorX") ) { return hx::Val( floorX ); }
		if (HX_FIELD_EQ(inName,"floorY") ) { return hx::Val( floorY ); }
		if (HX_FIELD_EQ(inName,"ending") ) { return hx::Val( ending ); }
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"sndCoin") ) { return hx::Val( sndCoin ); }
		if (HX_FIELD_EQ(inName,"sndHurt") ) { return hx::Val( sndHurt ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"floorMap") ) { return hx::Val( floorMap ); }
		if (HX_FIELD_EQ(inName,"grpCoins") ) { return hx::Val( grpCoins ); }
		if (HX_FIELD_EQ(inName,"grpHoles") ) { return hx::Val( grpHoles ); }
		if (HX_FIELD_EQ(inName,"buildMap") ) { return hx::Val( buildMap_dyn() ); }
		if (HX_FIELD_EQ(inName,"moveRoom") ) { return hx::Val( moveRoom_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"roomClear") ) { return hx::Val( roomClear ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"grpEnemies") ) { return hx::Val( grpEnemies ); }
		if (HX_FIELD_EQ(inName,"grpBullets") ) { return hx::Val( grpBullets ); }
		if (HX_FIELD_EQ(inName,"playerHurt") ) { return hx::Val( playerHurt_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bulletDelay") ) { return hx::Val( bulletDelay ); }
		if (HX_FIELD_EQ(inName,"doneFadeOut") ) { return hx::Val( doneFadeOut_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"grpObstacles") ) { return hx::Val( grpObstacles ); }
		if (HX_FIELD_EQ(inName,"playerHealth") ) { return hx::Val( playerHealth ); }
		if (HX_FIELD_EQ(inName,"bulletHitMap") ) { return hx::Val( bulletHitMap_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"placeEntities") ) { return hx::Val( placeEntities_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"bulletHitEnemy") ) { return hx::Val( bulletHitEnemy_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"playerTouchCoin") ) { return hx::Val( playerTouchCoin_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"checkEnemyVision") ) { return hx::Val( checkEnemyVision_dyn() ); }
		if (HX_FIELD_EQ(inName,"playerTouchEnemy") ) { return hx::Val( playerTouchEnemy_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val PlayState_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"map") ) { map=inValue.Cast<  ::flixel::addons::editors::ogmo::FlxOgmoLoader >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hud") ) { hud=inValue.Cast<  ::HUD >(); return inValue; }
		if (HX_FIELD_EQ(inName,"won") ) { won=inValue.Cast< bool >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"money") ) { money=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"player") ) { player=inValue.Cast<  ::Player >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mWalls") ) { mWalls=inValue.Cast<  ::flixel::tile::FlxTilemap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"floorX") ) { floorX=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"floorY") ) { floorY=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ending") ) { ending=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"sndCoin") ) { sndCoin=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sndHurt") ) { sndHurt=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"floorMap") ) { floorMap=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"grpCoins") ) { grpCoins=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"grpHoles") ) { grpHoles=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"roomClear") ) { roomClear=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"grpEnemies") ) { grpEnemies=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"grpBullets") ) { grpBullets=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bulletDelay") ) { bulletDelay=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"grpObstacles") ) { grpObstacles=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"playerHealth") ) { playerHealth=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PlayState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("player","\x61","\xeb","\xb8","\x37"));
	outFields->push(HX_HCSTRING("map","\x9c","\x0a","\x53","\x00"));
	outFields->push(HX_HCSTRING("mWalls","\x7c","\xd0","\x32","\xed"));
	outFields->push(HX_HCSTRING("floorMap","\x30","\x18","\xd4","\xeb"));
	outFields->push(HX_HCSTRING("floorX","\x0c","\xc1","\x60","\x41"));
	outFields->push(HX_HCSTRING("floorY","\x0d","\xc1","\x60","\x41"));
	outFields->push(HX_HCSTRING("roomClear","\x72","\xf1","\x9d","\x34"));
	outFields->push(HX_HCSTRING("sndCoin","\x9a","\xed","\x15","\x6a"));
	outFields->push(HX_HCSTRING("sndHurt","\x18","\x94","\x68","\x6d"));
	outFields->push(HX_HCSTRING("grpCoins","\x9d","\xcf","\x5a","\x2d"));
	outFields->push(HX_HCSTRING("grpEnemies","\x41","\x7b","\xe8","\xf3"));
	outFields->push(HX_HCSTRING("grpBullets","\x8c","\x7a","\xc9","\x4a"));
	outFields->push(HX_HCSTRING("grpHoles","\x0e","\xf5","\x5d","\x0e"));
	outFields->push(HX_HCSTRING("grpObstacles","\x9f","\x4a","\x9f","\x20"));
	outFields->push(HX_HCSTRING("bulletDelay","\xe1","\x45","\x00","\x8a"));
	outFields->push(HX_HCSTRING("hud","\xb7","\x50","\x4f","\x00"));
	outFields->push(HX_HCSTRING("money","\x40","\xba","\x5f","\x0c"));
	outFields->push(HX_HCSTRING("playerHealth","\xdd","\xc6","\xf7","\xf8"));
	outFields->push(HX_HCSTRING("ending","\xe7","\xa3","\x88","\xfa"));
	outFields->push(HX_HCSTRING("won","\x56","\xad","\x5a","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo PlayState_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::Player*/ ,(int)offsetof(PlayState_obj,player),HX_HCSTRING("player","\x61","\xeb","\xb8","\x37")},
	{hx::fsObject /*::flixel::addons::editors::ogmo::FlxOgmoLoader*/ ,(int)offsetof(PlayState_obj,map),HX_HCSTRING("map","\x9c","\x0a","\x53","\x00")},
	{hx::fsObject /*::flixel::tile::FlxTilemap*/ ,(int)offsetof(PlayState_obj,mWalls),HX_HCSTRING("mWalls","\x7c","\xd0","\x32","\xed")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(PlayState_obj,floorMap),HX_HCSTRING("floorMap","\x30","\x18","\xd4","\xeb")},
	{hx::fsInt,(int)offsetof(PlayState_obj,floorX),HX_HCSTRING("floorX","\x0c","\xc1","\x60","\x41")},
	{hx::fsInt,(int)offsetof(PlayState_obj,floorY),HX_HCSTRING("floorY","\x0d","\xc1","\x60","\x41")},
	{hx::fsBool,(int)offsetof(PlayState_obj,roomClear),HX_HCSTRING("roomClear","\x72","\xf1","\x9d","\x34")},
	{hx::fsObject /*::flixel::_hx_system::FlxSound*/ ,(int)offsetof(PlayState_obj,sndCoin),HX_HCSTRING("sndCoin","\x9a","\xed","\x15","\x6a")},
	{hx::fsObject /*::flixel::_hx_system::FlxSound*/ ,(int)offsetof(PlayState_obj,sndHurt),HX_HCSTRING("sndHurt","\x18","\x94","\x68","\x6d")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(PlayState_obj,grpCoins),HX_HCSTRING("grpCoins","\x9d","\xcf","\x5a","\x2d")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(PlayState_obj,grpEnemies),HX_HCSTRING("grpEnemies","\x41","\x7b","\xe8","\xf3")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(PlayState_obj,grpBullets),HX_HCSTRING("grpBullets","\x8c","\x7a","\xc9","\x4a")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(PlayState_obj,grpHoles),HX_HCSTRING("grpHoles","\x0e","\xf5","\x5d","\x0e")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(PlayState_obj,grpObstacles),HX_HCSTRING("grpObstacles","\x9f","\x4a","\x9f","\x20")},
	{hx::fsInt,(int)offsetof(PlayState_obj,bulletDelay),HX_HCSTRING("bulletDelay","\xe1","\x45","\x00","\x8a")},
	{hx::fsObject /*::HUD*/ ,(int)offsetof(PlayState_obj,hud),HX_HCSTRING("hud","\xb7","\x50","\x4f","\x00")},
	{hx::fsInt,(int)offsetof(PlayState_obj,money),HX_HCSTRING("money","\x40","\xba","\x5f","\x0c")},
	{hx::fsInt,(int)offsetof(PlayState_obj,playerHealth),HX_HCSTRING("playerHealth","\xdd","\xc6","\xf7","\xf8")},
	{hx::fsBool,(int)offsetof(PlayState_obj,ending),HX_HCSTRING("ending","\xe7","\xa3","\x88","\xfa")},
	{hx::fsBool,(int)offsetof(PlayState_obj,won),HX_HCSTRING("won","\x56","\xad","\x5a","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *PlayState_obj_sStaticStorageInfo = 0;
#endif

static ::String PlayState_obj_sMemberFields[] = {
	HX_HCSTRING("player","\x61","\xeb","\xb8","\x37"),
	HX_HCSTRING("map","\x9c","\x0a","\x53","\x00"),
	HX_HCSTRING("mWalls","\x7c","\xd0","\x32","\xed"),
	HX_HCSTRING("floorMap","\x30","\x18","\xd4","\xeb"),
	HX_HCSTRING("floorX","\x0c","\xc1","\x60","\x41"),
	HX_HCSTRING("floorY","\x0d","\xc1","\x60","\x41"),
	HX_HCSTRING("roomClear","\x72","\xf1","\x9d","\x34"),
	HX_HCSTRING("sndCoin","\x9a","\xed","\x15","\x6a"),
	HX_HCSTRING("sndHurt","\x18","\x94","\x68","\x6d"),
	HX_HCSTRING("grpCoins","\x9d","\xcf","\x5a","\x2d"),
	HX_HCSTRING("grpEnemies","\x41","\x7b","\xe8","\xf3"),
	HX_HCSTRING("grpBullets","\x8c","\x7a","\xc9","\x4a"),
	HX_HCSTRING("grpHoles","\x0e","\xf5","\x5d","\x0e"),
	HX_HCSTRING("grpObstacles","\x9f","\x4a","\x9f","\x20"),
	HX_HCSTRING("bulletDelay","\xe1","\x45","\x00","\x8a"),
	HX_HCSTRING("hud","\xb7","\x50","\x4f","\x00"),
	HX_HCSTRING("money","\x40","\xba","\x5f","\x0c"),
	HX_HCSTRING("playerHealth","\xdd","\xc6","\xf7","\xf8"),
	HX_HCSTRING("ending","\xe7","\xa3","\x88","\xfa"),
	HX_HCSTRING("won","\x56","\xad","\x5a","\x00"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("buildMap","\x0e","\x98","\xb2","\x53"),
	HX_HCSTRING("setup","\x7d","\xae","\x2f","\x7a"),
	HX_HCSTRING("placeEntities","\x28","\xe6","\x91","\x17"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("playerTouchCoin","\x4f","\x45","\x8d","\xf2"),
	HX_HCSTRING("checkEnemyVision","\x68","\x24","\x16","\x8c"),
	HX_HCSTRING("playerTouchEnemy","\xca","\x48","\x30","\x6f"),
	HX_HCSTRING("playerHurt","\x10","\x38","\xd9","\xa7"),
	HX_HCSTRING("doneFadeOut","\x10","\x64","\x5b","\xea"),
	HX_HCSTRING("moveRoom","\xcc","\x59","\x66","\xee"),
	HX_HCSTRING("shoot","\xdf","\x81","\x27","\x7c"),
	HX_HCSTRING("bulletHitMap","\xeb","\x15","\x7f","\x22"),
	HX_HCSTRING("bulletHitEnemy","\x57","\xcf","\x3b","\x7e"),
	::String(null()) };

static void PlayState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PlayState_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PlayState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PlayState_obj::__mClass,"__mClass");
};

#endif

hx::Class PlayState_obj::__mClass;

void PlayState_obj::__register()
{
	hx::Object *dummy = new PlayState_obj;
	PlayState_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("PlayState","\x5d","\x83","\xc2","\x46");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = PlayState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(PlayState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< PlayState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PlayState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlayState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlayState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

