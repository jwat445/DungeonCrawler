// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_Enemy
#include <Enemy.h>
#endif
#ifndef INCLUDED_EnemySpitter
#include <EnemySpitter.h>
#endif
#ifndef INCLUDED_FSM
#include <FSM.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7819db3967a993f1_20_new,"EnemySpitter","new",0x9dabe143,"EnemySpitter.new","EnemySpitter.hx",20,0xfe69378d)
static const int _hx_array_data_d4b383d1_2[] = {
	(int)0,(int)2,(int)3,(int)4,(int)5,
};
HX_LOCAL_STACK_FRAME(_hx_pos_7819db3967a993f1_57_shoot,"EnemySpitter","shoot",0x2c4fd182,"EnemySpitter.shoot","EnemySpitter.hx",57,0xfe69378d)

void EnemySpitter_obj::__construct(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,::String Etype){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_7819db3967a993f1_20_new)
HXLINE(  21)		super::__construct(X,Y,Etype);
HXLINE(  22)		this->variant = Etype;
HXLINE(  23)		this->loadGraphic(((HX_("assets/images/spitter-",9f,97,26,b4) + this->variant) + HX_(".png",3b,2d,bd,1e)),true,(int)32,(int)32,null(),null());
HXLINE(  24)		::haxe::IMap_obj::set(this->_facingFlip,(int)1, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),false)
            			->setFixed(1,HX_("y",79,00,00,00),false)));
HXLINE(  25)		::haxe::IMap_obj::set(this->_facingFlip,(int)16, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),true)
            			->setFixed(1,HX_("y",79,00,00,00),false)));
HXLINE(  26)		this->animation->add(HX_("shoot",df,81,27,7c),::Array_obj< int >::fromData( _hx_array_data_d4b383d1_2,5),(int)6,false,null(),null());
HXLINE(  28)		this->_sndStep = ::flixel::FlxG_obj::sound->load(HX_("assets/sounds/step_1.wav",db,04,d6,96),((Float).2),null(),null(),null(),null(),null(),null());
HXLINE(  29)		this->_sndShoot = ::flixel::FlxG_obj::sound->load(HX_("assets/sounds/enemy_shoot.wav",e7,47,f2,eb),((Float).2),null(),null(),null(),null(),null(),null());
HXLINE(  30)		 ::flixel::_hx_system::FlxSound _hx_tmp = this->_sndStep;
HXDLIN(  30)		Float _hx_tmp1 = this->x;
HXDLIN(  30)		Float _hx_tmp2 = this->y;
HXDLIN(  30)		 ::flixel::FlxObject _hx_tmp3 = ::flixel::FlxG_obj::camera->target;
HXDLIN(  30)		_hx_tmp->proximity(_hx_tmp1,_hx_tmp2,_hx_tmp3,(::flixel::FlxG_obj::width * ((Float).4)),null());
HXLINE(  32)		 ::flixel::math::FlxPoint _hx_tmp4 = this->drag;
HXDLIN(  32)		_hx_tmp4->set_x(this->drag->set_y((int)1000));
HXLINE(  33)		this->set_width((int)16);
HXLINE(  34)		this->set_height((int)24);
HXLINE(  35)		this->offset->set_x((int)8);
HXLINE(  36)		this->offset->set_y((int)4);
HXLINE(  37)		{
HXLINE(  37)			::String _g = this->variant;
HXDLIN(  37)			::String _hx_switch_0 = _g;
            			if (  (_hx_switch_0==HX_("big",c0,b8,4a,00)) ){
HXLINE(  43)				this->health = (int)100;
HXLINE(  44)				this->speed = (int)60;
HXLINE(  42)				goto _hx_goto_0;
            			}
            			if (  (_hx_switch_0==HX_("small",c7,f0,6a,7f)) ){
HXLINE(  40)				this->health = (int)25;
HXLINE(  41)				this->speed = (int)150;
HXLINE(  39)				goto _hx_goto_0;
            			}
            			/* default */{
HXLINE(  46)				this->health = (int)50;
HXLINE(  47)				this->speed = (int)100;
            			}
            			_hx_goto_0:;
            		}
HXLINE(  49)		this->_brain =  ::FSM_obj::__alloc( HX_CTX ,this->idle_dyn());
HXLINE(  50)		this->_idleTmr = (int)0;
HXLINE(  51)		 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN(  51)		point->_inPool = false;
HXDLIN(  51)		this->playerPos = point;
            	}

Dynamic EnemySpitter_obj::__CreateEmpty() { return new EnemySpitter_obj; }

void *EnemySpitter_obj::_hx_vtable = 0;

Dynamic EnemySpitter_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< EnemySpitter_obj > _hx_result = new EnemySpitter_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool EnemySpitter_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x13e48a35) {
		if (inClassId<=(int)0x0b6ffd77) {
			if (inClassId<=(int)0x03a88228) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x03a88228;
			} else {
				return inClassId==(int)0x0b6ffd77;
			}
		} else {
			return inClassId==(int)0x13e48a35;
		}
	} else {
		return inClassId==(int)0x25a685e0 || inClassId==(int)0x2e105115;
	}
}

bool EnemySpitter_obj::shoot(){
            	HX_STACKFRAME(&_hx_pos_7819db3967a993f1_57_shoot)
HXDLIN(  57)		bool _hx_tmp;
HXDLIN(  57)		if (this->seesPlayer) {
HXDLIN(  57)			_hx_tmp = (this->bulletDelay < (int)0);
            		}
            		else {
HXDLIN(  57)			_hx_tmp = false;
            		}
HXDLIN(  57)		if (_hx_tmp) {
HXLINE(  59)			this->_sndShoot->play(null(),null(),null());
HXLINE(  60)			this->bulletDelay = (int)50;
HXLINE(  61)			return true;
            		}
            		else {
HXLINE(  65)			return false;
            		}
HXLINE(  57)		return false;
            	}



hx::ObjectPtr< EnemySpitter_obj > EnemySpitter_obj::__new(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,::String Etype) {
	hx::ObjectPtr< EnemySpitter_obj > __this = new EnemySpitter_obj();
	__this->__construct(__o_X,__o_Y,Etype);
	return __this;
}

hx::ObjectPtr< EnemySpitter_obj > EnemySpitter_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,::String Etype) {
	EnemySpitter_obj *__this = (EnemySpitter_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(EnemySpitter_obj), true, "EnemySpitter"));
	*(void **)__this = EnemySpitter_obj::_hx_vtable;
	__this->__construct(__o_X,__o_Y,Etype);
	return __this;
}

EnemySpitter_obj::EnemySpitter_obj()
{
}

hx::Val EnemySpitter_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"shoot") ) { return hx::Val( shoot_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *EnemySpitter_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *EnemySpitter_obj_sStaticStorageInfo = 0;
#endif

static ::String EnemySpitter_obj_sMemberFields[] = {
	HX_HCSTRING("shoot","\xdf","\x81","\x27","\x7c"),
	::String(null()) };

static void EnemySpitter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(EnemySpitter_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void EnemySpitter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(EnemySpitter_obj::__mClass,"__mClass");
};

#endif

hx::Class EnemySpitter_obj::__mClass;

void EnemySpitter_obj::__register()
{
	hx::Object *dummy = new EnemySpitter_obj;
	EnemySpitter_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("EnemySpitter","\xd1","\x83","\xb3","\xd4");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = EnemySpitter_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(EnemySpitter_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< EnemySpitter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = EnemySpitter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = EnemySpitter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = EnemySpitter_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

