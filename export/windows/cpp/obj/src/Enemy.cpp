// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Bullet
#include <Bullet.h>
#endif
#ifndef INCLUDED_Enemy
#include <Enemy.h>
#endif
#ifndef INCLUDED_FSM
#include <FSM.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_effects_FlxFlicker
#include <flixel/effects/FlxFlicker.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c595a05c1c7a687d_15_new,"Enemy","new",0x35d4571a,"Enemy.new","Enemy.hx",15,0xbda88996)
HX_LOCAL_STACK_FRAME(_hx_pos_c595a05c1c7a687d_36_draw,"Enemy","draw",0xdd65880a,"Enemy.draw","Enemy.hx",36,0xbda88996)
HX_LOCAL_STACK_FRAME(_hx_pos_c595a05c1c7a687d_71_idle,"Enemy","idle",0xe0a9031a,"Enemy.idle","Enemy.hx",71,0xbda88996)
HX_LOCAL_STACK_FRAME(_hx_pos_c595a05c1c7a687d_76_chase,"Enemy","chase",0x416ec6e8,"Enemy.chase","Enemy.hx",76,0xbda88996)
HX_LOCAL_STACK_FRAME(_hx_pos_c595a05c1c7a687d_82_shoot,"Enemy","shoot",0x77e2ab19,"Enemy.shoot","Enemy.hx",82,0xbda88996)
HX_LOCAL_STACK_FRAME(_hx_pos_c595a05c1c7a687d_86_damage,"Enemy","damage",0x65ed79f5,"Enemy.damage","Enemy.hx",86,0xbda88996)
HX_LOCAL_STACK_FRAME(_hx_pos_c595a05c1c7a687d_92_update,"Enemy","update",0xcf0e6f8f,"Enemy.update","Enemy.hx",92,0xbda88996)

void Enemy_obj::__construct(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,::String Etype){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
            	HX_STACKFRAME(&_hx_pos_c595a05c1c7a687d_15_new)
HXLINE(  23)		this->seesPlayer = false;
HXLINE(  31)		super::__construct(X,Y,null());
HXLINE(  32)		this->bulletDelay = (int)60;
            	}

Dynamic Enemy_obj::__CreateEmpty() { return new Enemy_obj; }

void *Enemy_obj::_hx_vtable = 0;

Dynamic Enemy_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Enemy_obj > _hx_result = new Enemy_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Enemy_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0b6ffd77) {
		if (inClassId<=(int)0x03a88228) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x03a88228;
		} else {
			return inClassId==(int)0x0b6ffd77;
		}
	} else {
		return inClassId==(int)0x25a685e0 || inClassId==(int)0x2e105115;
	}
}

void Enemy_obj::draw(){
            	HX_STACKFRAME(&_hx_pos_c595a05c1c7a687d_36_draw)
HXLINE(  37)		bool _hx_tmp;
HXDLIN(  37)		bool _hx_tmp1;
HXDLIN(  37)		if ((this->velocity->x == (int)0)) {
HXLINE(  37)			_hx_tmp1 = (this->velocity->y != (int)0);
            		}
            		else {
HXLINE(  37)			_hx_tmp1 = true;
            		}
HXDLIN(  37)		if (_hx_tmp1) {
HXLINE(  37)			_hx_tmp = (this->touching == (int)0);
            		}
            		else {
HXLINE(  37)			_hx_tmp = false;
            		}
HXDLIN(  37)		if (_hx_tmp) {
HXLINE(  39)			Float _hx_tmp2 = ::Math_obj::abs(this->velocity->x);
HXDLIN(  39)			if ((_hx_tmp2 > ::Math_obj::abs(this->velocity->y))) {
HXLINE(  41)				if ((this->velocity->x < (int)0)) {
HXLINE(  43)					this->set_facing((int)1);
            				}
            				else {
HXLINE(  47)					this->set_facing((int)16);
            				}
            			}
            			else {
HXLINE(  52)				if ((this->velocity->y < (int)0)) {
HXLINE(  53)					this->set_facing((int)256);
            				}
            				else {
HXLINE(  55)					this->set_facing((int)4096);
            				}
            			}
HXLINE(  57)			{
HXLINE(  57)				int _g = this->facing;
HXDLIN(  57)				switch((int)(_g)){
            					case (int)1: case (int)16: {
HXLINE(  60)						this->animation->play(HX_("lr",86,5e,00,00),null(),null(),null());
            					}
            					break;
            					case (int)256: {
HXLINE(  62)						this->animation->play(HX_("u",75,00,00,00),null(),null(),null());
            					}
            					break;
            					case (int)4096: {
HXLINE(  64)						this->animation->play(HX_("d",64,00,00,00),null(),null(),null());
            					}
            					break;
            				}
            			}
            		}
HXLINE(  67)		this->super::draw();
            	}


void Enemy_obj::idle(){
            	HX_STACKFRAME(&_hx_pos_c595a05c1c7a687d_71_idle)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Enemy_obj,idle,(void))

void Enemy_obj::chase(){
            	HX_STACKFRAME(&_hx_pos_c595a05c1c7a687d_76_chase)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Enemy_obj,chase,(void))

bool Enemy_obj::shoot(){
            	HX_STACKFRAME(&_hx_pos_c595a05c1c7a687d_82_shoot)
HXDLIN(  82)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Enemy_obj,shoot,return )

void Enemy_obj::damage( ::Bullet bulletRef){
            	HX_STACKFRAME(&_hx_pos_c595a05c1c7a687d_86_damage)
HXLINE(  87)		this->hurt(bulletRef->damage);
HXLINE(  88)		::flixel::effects::FlxFlicker_obj::flicker(hx::ObjectPtr<OBJ_>(this),((Float).1),((Float).1),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Enemy_obj,damage,(void))

void Enemy_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_c595a05c1c7a687d_92_update)
HXLINE(  93)		this->_brain->update();
HXLINE(  94)		this->super::update(elapsed);
HXLINE(  96)		if (::flixel::effects::FlxFlicker_obj::isFlickering(hx::ObjectPtr<OBJ_>(this))) {
HXLINE(  98)			this->set_color((int)-65536);
            		}
            		else {
HXLINE( 101)			this->set_color((int)-1);
            		}
HXLINE( 104)		bool _hx_tmp;
HXDLIN( 104)		bool _hx_tmp1;
HXDLIN( 104)		if ((this->velocity->x == (int)0)) {
HXLINE( 104)			_hx_tmp1 = (this->velocity->y != (int)0);
            		}
            		else {
HXLINE( 104)			_hx_tmp1 = true;
            		}
HXDLIN( 104)		if (_hx_tmp1) {
HXLINE( 104)			_hx_tmp = (this->touching == (int)0);
            		}
            		else {
HXLINE( 104)			_hx_tmp = false;
            		}
            	}



hx::ObjectPtr< Enemy_obj > Enemy_obj::__new(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,::String Etype) {
	hx::ObjectPtr< Enemy_obj > __this = new Enemy_obj();
	__this->__construct(__o_X,__o_Y,Etype);
	return __this;
}

hx::ObjectPtr< Enemy_obj > Enemy_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,::String Etype) {
	Enemy_obj *__this = (Enemy_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Enemy_obj), true, "Enemy"));
	*(void **)__this = Enemy_obj::_hx_vtable;
	__this->__construct(__o_X,__o_Y,Etype);
	return __this;
}

Enemy_obj::Enemy_obj()
{
}

void Enemy_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Enemy);
	HX_MARK_MEMBER_NAME(speed,"speed");
	HX_MARK_MEMBER_NAME(variant,"variant");
	HX_MARK_MEMBER_NAME(_brain,"_brain");
	HX_MARK_MEMBER_NAME(_idleTmr,"_idleTmr");
	HX_MARK_MEMBER_NAME(_moveDir,"_moveDir");
	HX_MARK_MEMBER_NAME(seesPlayer,"seesPlayer");
	HX_MARK_MEMBER_NAME(playerPos,"playerPos");
	HX_MARK_MEMBER_NAME(_sndStep,"_sndStep");
	HX_MARK_MEMBER_NAME(_sndShoot,"_sndShoot");
	HX_MARK_MEMBER_NAME(bulletDelay,"bulletDelay");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Enemy_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(speed,"speed");
	HX_VISIT_MEMBER_NAME(variant,"variant");
	HX_VISIT_MEMBER_NAME(_brain,"_brain");
	HX_VISIT_MEMBER_NAME(_idleTmr,"_idleTmr");
	HX_VISIT_MEMBER_NAME(_moveDir,"_moveDir");
	HX_VISIT_MEMBER_NAME(seesPlayer,"seesPlayer");
	HX_VISIT_MEMBER_NAME(playerPos,"playerPos");
	HX_VISIT_MEMBER_NAME(_sndStep,"_sndStep");
	HX_VISIT_MEMBER_NAME(_sndShoot,"_sndShoot");
	HX_VISIT_MEMBER_NAME(bulletDelay,"bulletDelay");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Enemy_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn() ); }
		if (HX_FIELD_EQ(inName,"idle") ) { return hx::Val( idle_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { return hx::Val( speed ); }
		if (HX_FIELD_EQ(inName,"chase") ) { return hx::Val( chase_dyn() ); }
		if (HX_FIELD_EQ(inName,"shoot") ) { return hx::Val( shoot_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_brain") ) { return hx::Val( _brain ); }
		if (HX_FIELD_EQ(inName,"damage") ) { return hx::Val( damage_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"variant") ) { return hx::Val( variant ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_idleTmr") ) { return hx::Val( _idleTmr ); }
		if (HX_FIELD_EQ(inName,"_moveDir") ) { return hx::Val( _moveDir ); }
		if (HX_FIELD_EQ(inName,"_sndStep") ) { return hx::Val( _sndStep ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"playerPos") ) { return hx::Val( playerPos ); }
		if (HX_FIELD_EQ(inName,"_sndShoot") ) { return hx::Val( _sndShoot ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"seesPlayer") ) { return hx::Val( seesPlayer ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bulletDelay") ) { return hx::Val( bulletDelay ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Enemy_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { speed=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_brain") ) { _brain=inValue.Cast<  ::FSM >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"variant") ) { variant=inValue.Cast< ::String >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_idleTmr") ) { _idleTmr=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_moveDir") ) { _moveDir=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_sndStep") ) { _sndStep=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"playerPos") ) { playerPos=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_sndShoot") ) { _sndShoot=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"seesPlayer") ) { seesPlayer=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bulletDelay") ) { bulletDelay=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Enemy_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("speed","\x87","\x97","\x69","\x81"));
	outFields->push(HX_HCSTRING("variant","\x85","\x40","\xe2","\xdc"));
	outFields->push(HX_HCSTRING("_brain","\xf7","\x69","\xd0","\xb4"));
	outFields->push(HX_HCSTRING("_idleTmr","\xa6","\x73","\xff","\xb5"));
	outFields->push(HX_HCSTRING("_moveDir","\x3d","\xec","\x37","\x84"));
	outFields->push(HX_HCSTRING("seesPlayer","\x01","\x05","\x0b","\x46"));
	outFields->push(HX_HCSTRING("playerPos","\xb3","\xbc","\xc6","\x00"));
	outFields->push(HX_HCSTRING("_sndStep","\xd6","\x78","\x65","\xae"));
	outFields->push(HX_HCSTRING("_sndShoot","\x15","\x49","\x7d","\xe2"));
	outFields->push(HX_HCSTRING("bulletDelay","\xe1","\x45","\x00","\x8a"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Enemy_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Enemy_obj,speed),HX_HCSTRING("speed","\x87","\x97","\x69","\x81")},
	{hx::fsString,(int)offsetof(Enemy_obj,variant),HX_HCSTRING("variant","\x85","\x40","\xe2","\xdc")},
	{hx::fsObject /*::FSM*/ ,(int)offsetof(Enemy_obj,_brain),HX_HCSTRING("_brain","\xf7","\x69","\xd0","\xb4")},
	{hx::fsFloat,(int)offsetof(Enemy_obj,_idleTmr),HX_HCSTRING("_idleTmr","\xa6","\x73","\xff","\xb5")},
	{hx::fsFloat,(int)offsetof(Enemy_obj,_moveDir),HX_HCSTRING("_moveDir","\x3d","\xec","\x37","\x84")},
	{hx::fsBool,(int)offsetof(Enemy_obj,seesPlayer),HX_HCSTRING("seesPlayer","\x01","\x05","\x0b","\x46")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(Enemy_obj,playerPos),HX_HCSTRING("playerPos","\xb3","\xbc","\xc6","\x00")},
	{hx::fsObject /*::flixel::_hx_system::FlxSound*/ ,(int)offsetof(Enemy_obj,_sndStep),HX_HCSTRING("_sndStep","\xd6","\x78","\x65","\xae")},
	{hx::fsObject /*::flixel::_hx_system::FlxSound*/ ,(int)offsetof(Enemy_obj,_sndShoot),HX_HCSTRING("_sndShoot","\x15","\x49","\x7d","\xe2")},
	{hx::fsInt,(int)offsetof(Enemy_obj,bulletDelay),HX_HCSTRING("bulletDelay","\xe1","\x45","\x00","\x8a")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Enemy_obj_sStaticStorageInfo = 0;
#endif

static ::String Enemy_obj_sMemberFields[] = {
	HX_HCSTRING("speed","\x87","\x97","\x69","\x81"),
	HX_HCSTRING("variant","\x85","\x40","\xe2","\xdc"),
	HX_HCSTRING("_brain","\xf7","\x69","\xd0","\xb4"),
	HX_HCSTRING("_idleTmr","\xa6","\x73","\xff","\xb5"),
	HX_HCSTRING("_moveDir","\x3d","\xec","\x37","\x84"),
	HX_HCSTRING("seesPlayer","\x01","\x05","\x0b","\x46"),
	HX_HCSTRING("playerPos","\xb3","\xbc","\xc6","\x00"),
	HX_HCSTRING("_sndStep","\xd6","\x78","\x65","\xae"),
	HX_HCSTRING("_sndShoot","\x15","\x49","\x7d","\xe2"),
	HX_HCSTRING("bulletDelay","\xe1","\x45","\x00","\x8a"),
	HX_HCSTRING("draw","\x04","\x2c","\x70","\x42"),
	HX_HCSTRING("idle","\x14","\xa7","\xb3","\x45"),
	HX_HCSTRING("chase","\xae","\x9d","\xb3","\x45"),
	HX_HCSTRING("shoot","\xdf","\x81","\x27","\x7c"),
	HX_HCSTRING("damage","\x6f","\x90","\xe4","\x1d"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void Enemy_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Enemy_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Enemy_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Enemy_obj::__mClass,"__mClass");
};

#endif

hx::Class Enemy_obj::__mClass;

void Enemy_obj::__register()
{
	hx::Object *dummy = new Enemy_obj;
	Enemy_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Enemy","\x28","\x82","\xa8","\x03");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Enemy_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Enemy_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Enemy_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Enemy_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Enemy_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Enemy_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

