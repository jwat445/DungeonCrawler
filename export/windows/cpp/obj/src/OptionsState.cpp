// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_MenuState
#include <MenuState.h>
#endif
#ifndef INCLUDED_OptionsState
#include <OptionsState.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBar
#include <flixel/ui/FlxBar.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBarFillDirection
#include <flixel/ui/FlxBarFillDirection.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_ui__FlxButton_FlxButtonEvent
#include <flixel/ui/_FlxButton/FlxButtonEvent.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_03f5e745aacd5817_12_new,"OptionsState","new",0x73d32065,"OptionsState.new","OptionsState.hx",12,0x342db2ab)
HX_LOCAL_STACK_FRAME(_hx_pos_03f5e745aacd5817_31_create,"OptionsState","create",0xe6502817,"OptionsState.create","OptionsState.hx",31,0x342db2ab)
HX_LOCAL_STACK_FRAME(_hx_pos_03f5e745aacd5817_94_clickFullscreen,"OptionsState","clickFullscreen",0x4ebea828,"OptionsState.clickFullscreen","OptionsState.hx",94,0x342db2ab)
HX_LOCAL_STACK_FRAME(_hx_pos_03f5e745aacd5817_105_clickClearData,"OptionsState","clickClearData",0x24baad0a,"OptionsState.clickClearData","OptionsState.hx",105,0x342db2ab)
HX_LOCAL_STACK_FRAME(_hx_pos_03f5e745aacd5817_119_clickBack,"OptionsState","clickBack",0x41d6e854,"OptionsState.clickBack","OptionsState.hx",119,0x342db2ab)
HX_LOCAL_STACK_FRAME(_hx_pos_03f5e745aacd5817_115_clickBack,"OptionsState","clickBack",0x41d6e854,"OptionsState.clickBack","OptionsState.hx",115,0x342db2ab)
HX_LOCAL_STACK_FRAME(_hx_pos_03f5e745aacd5817_127_clickVolumeDown,"OptionsState","clickVolumeDown",0x7a47b149,"OptionsState.clickVolumeDown","OptionsState.hx",127,0x342db2ab)
HX_LOCAL_STACK_FRAME(_hx_pos_03f5e745aacd5817_137_clickVolumeUp,"OptionsState","clickVolumeUp",0x9ac24782,"OptionsState.clickVolumeUp","OptionsState.hx",137,0x342db2ab)
HX_LOCAL_STACK_FRAME(_hx_pos_03f5e745aacd5817_147_updateVolume,"OptionsState","updateVolume",0x0aa1d81e,"OptionsState.updateVolume","OptionsState.hx",147,0x342db2ab)

void OptionsState_obj::__construct( ::Dynamic MaxSize){
            	HX_STACKFRAME(&_hx_pos_03f5e745aacd5817_12_new)
HXDLIN(  12)		super::__construct(MaxSize);
            	}

Dynamic OptionsState_obj::__CreateEmpty() { return new OptionsState_obj; }

void *OptionsState_obj::_hx_vtable = 0;

Dynamic OptionsState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< OptionsState_obj > _hx_result = new OptionsState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool OptionsState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2335d9a7) {
		if (inClassId<=(int)0x0f8009f3) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0f8009f3;
		} else {
			return inClassId==(int)0x2335d9a7;
		}
	} else {
		return inClassId==(int)0x25a685e0 || inClassId==(int)0x3634c52c;
	}
}

void OptionsState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_03f5e745aacd5817_31_create)
HXLINE(  33)		this->_txtTitle =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(int)20,(int)0,HX_("Options",3e,5b,4f,ad),(int)22,null());
HXLINE(  34)		this->_txtTitle->set_alignment(HX_("center",d5,25,db,05));
HXLINE(  35)		this->_txtTitle->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE(  36)		this->add(this->_txtTitle);
HXLINE(  38)		Float _hx_tmp = this->_txtTitle->y;
HXDLIN(  38)		this->_txtVolume =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,((_hx_tmp + this->_txtTitle->get_height()) + (int)10),(int)0,HX_("Volume",fa,9d,e7,93),(int)8,null());
HXLINE(  39)		this->_txtVolume->set_alignment(HX_("center",d5,25,db,05));
HXLINE(  40)		this->_txtVolume->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE(  41)		this->add(this->_txtVolume);
HXLINE(  44)		Float _hx_tmp1 = this->_txtVolume->y;
HXDLIN(  44)		this->_btnVolumeDown =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,(int)8,((_hx_tmp1 + this->_txtVolume->get_height()) + (int)2),HX_("-",2d,00,00,00),this->clickVolumeDown_dyn());
HXLINE(  45)		this->_btnVolumeDown->loadGraphic(HX_("assets/images/button.png",98,1b,b6,cd),true,(int)20,(int)20,null(),null());
HXLINE(  46)		this->_btnVolumeDown->onUp->sound = ::flixel::FlxG_obj::sound->load(HX_("assets/sounds/select.wav",99,31,ec,2e),null(),null(),null(),null(),null(),null(),null());
HXLINE(  47)		this->add(this->_btnVolumeDown);
HXLINE(  49)		this->_btnVolumeUp =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,(::flixel::FlxG_obj::width - (int)28),this->_btnVolumeDown->y,HX_("+",2b,00,00,00),this->clickVolumeUp_dyn());
HXLINE(  50)		this->_btnVolumeUp->loadGraphic(HX_("assets/images/button.png",98,1b,b6,cd),true,(int)20,(int)20,null(),null());
HXLINE(  51)		this->_btnVolumeUp->onUp->sound = ::flixel::FlxG_obj::sound->load(HX_("assets/sounds/select.wav",99,31,ec,2e),null(),null(),null(),null(),null(),null(),null());
HXLINE(  52)		this->add(this->_btnVolumeUp);
HXLINE(  54)		Float _hx_tmp2 = this->_btnVolumeDown->x;
HXDLIN(  54)		Float _hx_tmp3 = ((_hx_tmp2 + this->_btnVolumeDown->get_width()) + (int)4);
HXDLIN(  54)		Float _hx_tmp4 = this->_btnVolumeDown->y;
HXDLIN(  54)		int _hx_tmp5 = ::Std_obj::_hx_int((::flixel::FlxG_obj::width - (int)64));
HXDLIN(  54)		this->_barVolume =  ::flixel::ui::FlxBar_obj::__alloc( HX_CTX ,_hx_tmp3,_hx_tmp4,::flixel::ui::FlxBarFillDirection_obj::LEFT_TO_RIGHT_dyn(),_hx_tmp5,::Std_obj::_hx_int(this->_btnVolumeUp->get_height()),null(),null(),null(),null(),null());
HXLINE(  55)		this->_barVolume->createFilledBar((int)-12171706,(int)-1,true,(int)-1);
HXLINE(  56)		this->add(this->_barVolume);
HXLINE(  58)		this->_txtVolumeAmt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(int)0,(int)200,((::flixel::FlxG_obj::sound->volume * (int)100) + HX_("%",25,00,00,00)),(int)8,null());
HXLINE(  59)		this->_txtVolumeAmt->set_alignment(HX_("center",d5,25,db,05));
HXLINE(  60)		this->_txtVolumeAmt->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXLINE(  61)		this->_txtVolumeAmt->set_borderColor((int)-12171706);
HXLINE(  62)		 ::flixel::text::FlxText _hx_tmp6 = this->_txtVolumeAmt;
HXDLIN(  62)		Float _hx_tmp7 = this->_barVolume->y;
HXDLIN(  62)		Float _hx_tmp8 = (_hx_tmp7 + ((Float)this->_barVolume->get_height() / (Float)(int)2));
HXDLIN(  62)		_hx_tmp6->set_y((_hx_tmp8 - ((Float)this->_txtVolumeAmt->get_height() / (Float)(int)2)));
HXLINE(  63)		this->_txtVolumeAmt->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE(  64)		this->add(this->_txtVolumeAmt);
HXLINE(  67)		Float _hx_tmp9 = this->_barVolume->y;
HXDLIN(  67)		Float _hx_tmp10 = ((_hx_tmp9 + this->_barVolume->get_height()) + (int)8);
HXDLIN(  67)		::String _hx_tmp11;
HXDLIN(  67)		if (::flixel::FlxG_obj::get_fullscreen()) {
HXLINE(  67)			_hx_tmp11 = HX_("FULLSCREEN",3b,ae,bd,eb);
            		}
            		else {
HXLINE(  67)			_hx_tmp11 = HX_("WINDOWED",4f,58,53,d7);
            		}
HXDLIN(  67)		this->_btnFullScreen =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,(int)0,_hx_tmp10,_hx_tmp11,this->clickFullscreen_dyn());
HXLINE(  68)		this->_btnFullScreen->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE(  69)		this->add(this->_btnFullScreen);
HXLINE(  72)		Float _hx_tmp12 = (((Float)::flixel::FlxG_obj::width / (Float)(int)2) - (int)90);
HXDLIN(  72)		this->_btnClearData =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,_hx_tmp12,(::flixel::FlxG_obj::height - (int)28),HX_("Clear Data",dd,e5,9c,d2),this->clickClearData_dyn());
HXLINE(  73)		this->_btnClearData->onUp->sound = ::flixel::FlxG_obj::sound->load(HX_("assets/sounds/select.wav",99,31,ec,2e),null(),null(),null(),null(),null(),null(),null());
HXLINE(  74)		this->add(this->_btnClearData);
HXLINE(  76)		Float _hx_tmp13 = (((Float)::flixel::FlxG_obj::width / (Float)(int)2) + (int)10);
HXDLIN(  76)		this->_btnBack =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,_hx_tmp13,(::flixel::FlxG_obj::height - (int)28),HX_("Back",47,06,ea,2b),this->clickBack_dyn());
HXLINE(  77)		this->_btnBack->onUp->sound = ::flixel::FlxG_obj::sound->load(HX_("assets/sounds/select.wav",99,31,ec,2e),null(),null(),null(),null(),null(),null(),null());
HXLINE(  78)		this->add(this->_btnBack);
HXLINE(  81)		this->_save =  ::flixel::util::FlxSave_obj::__alloc( HX_CTX );
HXLINE(  82)		this->_save->bind(HX_("flixel-tutorial",ef,96,5f,79));
HXLINE(  85)		this->updateVolume();
HXLINE(  87)		::flixel::FlxG_obj::camera->fade((int)-16777216,((Float).33),true,null(),null());
HXLINE(  89)		this->super::create();
            	}


void OptionsState_obj::clickFullscreen(){
            	HX_GC_STACKFRAME(&_hx_pos_03f5e745aacd5817_94_clickFullscreen)
HXLINE(  95)		::flixel::FlxG_obj::set_fullscreen(!(::flixel::FlxG_obj::get_fullscreen()));
HXLINE(  96)		{
HXLINE(  96)			 ::flixel::ui::FlxButton _this = this->_btnFullScreen;
HXDLIN(  96)			::String Text;
HXDLIN(  96)			if (::flixel::FlxG_obj::get_fullscreen()) {
HXLINE(  96)				Text = HX_("FULLSCREEN",3b,ae,bd,eb);
            			}
            			else {
HXLINE(  96)				Text = HX_("WINDOWED",4f,58,53,d7);
            			}
HXDLIN(  96)			if (hx::IsNull( _this->label )) {
HXLINE(  96)				if (hx::IsNotNull( Text )) {
HXLINE(  96)					Float _hx_tmp = (_this->x + _this->labelOffsets->__get((int)0).StaticCast<  ::flixel::math::FlxPoint >()->x);
HXDLIN(  96)					_this->set_label( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,_hx_tmp,(_this->y + _this->labelOffsets->__get((int)0).StaticCast<  ::flixel::math::FlxPoint >()->y),(int)80,Text,null(),null()));
HXDLIN(  96)					_this->label->setFormat(null(),(int)8,(int)3355443,HX_("center",d5,25,db,05),null(),null(),null());
HXDLIN(  96)					 ::flixel::text::FlxText _this1 = _this->label;
HXDLIN(  96)					_this1->set_alpha(_this->labelAlphas->__get(_this->status));
HXDLIN(  96)					_this->label->drawFrame(true);
            				}
            			}
            			else {
HXLINE(  96)				_this->label->set_text(Text);
            			}
            		}
HXLINE(  97)		this->_save->data->__SetField(HX_("fullscreen",3b,3a,b4,f9),::flixel::FlxG_obj::get_fullscreen(),hx::paccDynamic);
            	}


HX_DEFINE_DYNAMIC_FUNC0(OptionsState_obj,clickFullscreen,(void))

void OptionsState_obj::clickClearData(){
            	HX_STACKFRAME(&_hx_pos_03f5e745aacd5817_105_clickClearData)
HXLINE( 106)		this->_save->erase();
HXLINE( 107)		::flixel::FlxG_obj::sound->set_volume(((Float).5));
HXLINE( 108)		this->updateVolume();
            	}


HX_DEFINE_DYNAMIC_FUNC0(OptionsState_obj,clickClearData,(void))

void OptionsState_obj::clickBack(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_03f5e745aacd5817_119_clickBack)
HXLINE( 119)			 ::flixel::FlxState nextState =  ::MenuState_obj::__alloc( HX_CTX ,null());
HXDLIN( 119)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 119)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_03f5e745aacd5817_115_clickBack)
HXLINE( 116)		this->_save->close(null(),null());
HXLINE( 117)		::flixel::FlxG_obj::camera->fade((int)-16777216,((Float).33),false, ::Dynamic(new _hx_Closure_0()),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(OptionsState_obj,clickBack,(void))

void OptionsState_obj::clickVolumeDown(){
            	HX_STACKFRAME(&_hx_pos_03f5e745aacd5817_127_clickVolumeDown)
HXLINE( 128)		{
HXLINE( 128)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _g = ::flixel::FlxG_obj::sound;
HXDLIN( 128)			_g->set_volume((_g->volume - ((Float)0.1)));
            		}
HXLINE( 129)		this->_save->data->__SetField(HX_("volume",da,29,53,5f),::flixel::FlxG_obj::sound->volume,hx::paccDynamic);
HXLINE( 130)		this->updateVolume();
            	}


HX_DEFINE_DYNAMIC_FUNC0(OptionsState_obj,clickVolumeDown,(void))

void OptionsState_obj::clickVolumeUp(){
            	HX_STACKFRAME(&_hx_pos_03f5e745aacd5817_137_clickVolumeUp)
HXLINE( 138)		{
HXLINE( 138)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _g = ::flixel::FlxG_obj::sound;
HXDLIN( 138)			_g->set_volume((_g->volume + ((Float)0.1)));
            		}
HXLINE( 139)		this->_save->data->__SetField(HX_("volume",da,29,53,5f),::flixel::FlxG_obj::sound->volume,hx::paccDynamic);
HXLINE( 140)		this->updateVolume();
            	}


HX_DEFINE_DYNAMIC_FUNC0(OptionsState_obj,clickVolumeUp,(void))

void OptionsState_obj::updateVolume(){
            	HX_STACKFRAME(&_hx_pos_03f5e745aacd5817_147_updateVolume)
HXLINE( 148)		int vol = ::Math_obj::round((::flixel::FlxG_obj::sound->volume * (int)100));
HXLINE( 149)		this->_barVolume->set_value(vol);
HXLINE( 150)		 ::flixel::text::FlxText _hx_tmp = this->_txtVolumeAmt;
HXDLIN( 150)		_hx_tmp->set_text((vol + HX_("%",25,00,00,00)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(OptionsState_obj,updateVolume,(void))


hx::ObjectPtr< OptionsState_obj > OptionsState_obj::__new( ::Dynamic MaxSize) {
	hx::ObjectPtr< OptionsState_obj > __this = new OptionsState_obj();
	__this->__construct(MaxSize);
	return __this;
}

hx::ObjectPtr< OptionsState_obj > OptionsState_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	OptionsState_obj *__this = (OptionsState_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(OptionsState_obj), true, "OptionsState"));
	*(void **)__this = OptionsState_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

OptionsState_obj::OptionsState_obj()
{
}

void OptionsState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(OptionsState);
	HX_MARK_MEMBER_NAME(_txtTitle,"_txtTitle");
	HX_MARK_MEMBER_NAME(_barVolume,"_barVolume");
	HX_MARK_MEMBER_NAME(_txtVolume,"_txtVolume");
	HX_MARK_MEMBER_NAME(_txtVolumeAmt,"_txtVolumeAmt");
	HX_MARK_MEMBER_NAME(_btnVolumeDown,"_btnVolumeDown");
	HX_MARK_MEMBER_NAME(_btnVolumeUp,"_btnVolumeUp");
	HX_MARK_MEMBER_NAME(_btnClearData,"_btnClearData");
	HX_MARK_MEMBER_NAME(_btnBack,"_btnBack");
	HX_MARK_MEMBER_NAME(_btnFullScreen,"_btnFullScreen");
	HX_MARK_MEMBER_NAME(_save,"_save");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void OptionsState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_txtTitle,"_txtTitle");
	HX_VISIT_MEMBER_NAME(_barVolume,"_barVolume");
	HX_VISIT_MEMBER_NAME(_txtVolume,"_txtVolume");
	HX_VISIT_MEMBER_NAME(_txtVolumeAmt,"_txtVolumeAmt");
	HX_VISIT_MEMBER_NAME(_btnVolumeDown,"_btnVolumeDown");
	HX_VISIT_MEMBER_NAME(_btnVolumeUp,"_btnVolumeUp");
	HX_VISIT_MEMBER_NAME(_btnClearData,"_btnClearData");
	HX_VISIT_MEMBER_NAME(_btnBack,"_btnBack");
	HX_VISIT_MEMBER_NAME(_btnFullScreen,"_btnFullScreen");
	HX_VISIT_MEMBER_NAME(_save,"_save");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

hx::Val OptionsState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_save") ) { return hx::Val( _save ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_btnBack") ) { return hx::Val( _btnBack ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_txtTitle") ) { return hx::Val( _txtTitle ); }
		if (HX_FIELD_EQ(inName,"clickBack") ) { return hx::Val( clickBack_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_barVolume") ) { return hx::Val( _barVolume ); }
		if (HX_FIELD_EQ(inName,"_txtVolume") ) { return hx::Val( _txtVolume ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_btnVolumeUp") ) { return hx::Val( _btnVolumeUp ); }
		if (HX_FIELD_EQ(inName,"updateVolume") ) { return hx::Val( updateVolume_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_txtVolumeAmt") ) { return hx::Val( _txtVolumeAmt ); }
		if (HX_FIELD_EQ(inName,"_btnClearData") ) { return hx::Val( _btnClearData ); }
		if (HX_FIELD_EQ(inName,"clickVolumeUp") ) { return hx::Val( clickVolumeUp_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_btnVolumeDown") ) { return hx::Val( _btnVolumeDown ); }
		if (HX_FIELD_EQ(inName,"_btnFullScreen") ) { return hx::Val( _btnFullScreen ); }
		if (HX_FIELD_EQ(inName,"clickClearData") ) { return hx::Val( clickClearData_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"clickFullscreen") ) { return hx::Val( clickFullscreen_dyn() ); }
		if (HX_FIELD_EQ(inName,"clickVolumeDown") ) { return hx::Val( clickVolumeDown_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val OptionsState_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_save") ) { _save=inValue.Cast<  ::flixel::util::FlxSave >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_btnBack") ) { _btnBack=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_txtTitle") ) { _txtTitle=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_barVolume") ) { _barVolume=inValue.Cast<  ::flixel::ui::FlxBar >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_txtVolume") ) { _txtVolume=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_btnVolumeUp") ) { _btnVolumeUp=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_txtVolumeAmt") ) { _txtVolumeAmt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_btnClearData") ) { _btnClearData=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_btnVolumeDown") ) { _btnVolumeDown=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_btnFullScreen") ) { _btnFullScreen=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void OptionsState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_txtTitle","\x67","\xb8","\x4f","\xb5"));
	outFields->push(HX_HCSTRING("_barVolume","\xce","\x6b","\xa0","\xe0"));
	outFields->push(HX_HCSTRING("_txtVolume","\x2b","\xfc","\x4c","\x2c"));
	outFields->push(HX_HCSTRING("_txtVolumeAmt","\x9d","\x62","\x96","\x39"));
	outFields->push(HX_HCSTRING("_btnVolumeDown","\x19","\x05","\x40","\x38"));
	outFields->push(HX_HCSTRING("_btnVolumeUp","\x52","\x07","\x2f","\x94"));
	outFields->push(HX_HCSTRING("_btnClearData","\x3a","\xc3","\x75","\x6a"));
	outFields->push(HX_HCSTRING("_btnBack","\x24","\x80","\x53","\x08"));
	outFields->push(HX_HCSTRING("_btnFullScreen","\x18","\x70","\x4b","\x41"));
	outFields->push(HX_HCSTRING("_save","\x1c","\xa7","\x5e","\xff"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo OptionsState_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(OptionsState_obj,_txtTitle),HX_HCSTRING("_txtTitle","\x67","\xb8","\x4f","\xb5")},
	{hx::fsObject /*::flixel::ui::FlxBar*/ ,(int)offsetof(OptionsState_obj,_barVolume),HX_HCSTRING("_barVolume","\xce","\x6b","\xa0","\xe0")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(OptionsState_obj,_txtVolume),HX_HCSTRING("_txtVolume","\x2b","\xfc","\x4c","\x2c")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(OptionsState_obj,_txtVolumeAmt),HX_HCSTRING("_txtVolumeAmt","\x9d","\x62","\x96","\x39")},
	{hx::fsObject /*::flixel::ui::FlxButton*/ ,(int)offsetof(OptionsState_obj,_btnVolumeDown),HX_HCSTRING("_btnVolumeDown","\x19","\x05","\x40","\x38")},
	{hx::fsObject /*::flixel::ui::FlxButton*/ ,(int)offsetof(OptionsState_obj,_btnVolumeUp),HX_HCSTRING("_btnVolumeUp","\x52","\x07","\x2f","\x94")},
	{hx::fsObject /*::flixel::ui::FlxButton*/ ,(int)offsetof(OptionsState_obj,_btnClearData),HX_HCSTRING("_btnClearData","\x3a","\xc3","\x75","\x6a")},
	{hx::fsObject /*::flixel::ui::FlxButton*/ ,(int)offsetof(OptionsState_obj,_btnBack),HX_HCSTRING("_btnBack","\x24","\x80","\x53","\x08")},
	{hx::fsObject /*::flixel::ui::FlxButton*/ ,(int)offsetof(OptionsState_obj,_btnFullScreen),HX_HCSTRING("_btnFullScreen","\x18","\x70","\x4b","\x41")},
	{hx::fsObject /*::flixel::util::FlxSave*/ ,(int)offsetof(OptionsState_obj,_save),HX_HCSTRING("_save","\x1c","\xa7","\x5e","\xff")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *OptionsState_obj_sStaticStorageInfo = 0;
#endif

static ::String OptionsState_obj_sMemberFields[] = {
	HX_HCSTRING("_txtTitle","\x67","\xb8","\x4f","\xb5"),
	HX_HCSTRING("_barVolume","\xce","\x6b","\xa0","\xe0"),
	HX_HCSTRING("_txtVolume","\x2b","\xfc","\x4c","\x2c"),
	HX_HCSTRING("_txtVolumeAmt","\x9d","\x62","\x96","\x39"),
	HX_HCSTRING("_btnVolumeDown","\x19","\x05","\x40","\x38"),
	HX_HCSTRING("_btnVolumeUp","\x52","\x07","\x2f","\x94"),
	HX_HCSTRING("_btnClearData","\x3a","\xc3","\x75","\x6a"),
	HX_HCSTRING("_btnBack","\x24","\x80","\x53","\x08"),
	HX_HCSTRING("_btnFullScreen","\x18","\x70","\x4b","\x41"),
	HX_HCSTRING("_save","\x1c","\xa7","\x5e","\xff"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("clickFullscreen","\xa3","\xe4","\xc4","\x94"),
	HX_HCSTRING("clickClearData","\xef","\xd8","\xda","\x3a"),
	HX_HCSTRING("clickBack","\x8f","\x46","\x10","\x20"),
	HX_HCSTRING("clickVolumeDown","\xc4","\xed","\x4d","\xc0"),
	HX_HCSTRING("clickVolumeUp","\x3d","\xdf","\xa6","\x2c"),
	HX_HCSTRING("updateVolume","\xc3","\xd0","\x16","\x5f"),
	::String(null()) };

static void OptionsState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(OptionsState_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void OptionsState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(OptionsState_obj::__mClass,"__mClass");
};

#endif

hx::Class OptionsState_obj::__mClass;

void OptionsState_obj::__register()
{
	hx::Object *dummy = new OptionsState_obj;
	OptionsState_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("OptionsState","\xf3","\x09","\x80","\x0f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = OptionsState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(OptionsState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< OptionsState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = OptionsState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = OptionsState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = OptionsState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

