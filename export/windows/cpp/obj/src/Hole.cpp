// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_Hole
#include <Hole.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_26ec59321071b52b_12_new,"Hole","new",0x92bdc652,"Hole.new","Hole.hx",12,0x85d2e95e)

void Hole_obj::__construct(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
            	HX_STACKFRAME(&_hx_pos_26ec59321071b52b_12_new)
HXLINE(  13)		super::__construct(X,Y,null());
HXLINE(  14)		this->loadGraphic(HX_("assets/images/hole.png",26,01,39,77),true,(int)32,(int)32,null(),null());
HXLINE(  15)		this->set_immovable(true);
            	}

Dynamic Hole_obj::__CreateEmpty() { return new Hole_obj; }

void *Hole_obj::_hx_vtable = 0;

Dynamic Hole_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Hole_obj > _hx_result = new Hole_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Hole_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x0b6ffd77) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x2e105115 || inClassId==(int)0x2febf560;
	}
}


hx::ObjectPtr< Hole_obj > Hole_obj::__new(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y) {
	hx::ObjectPtr< Hole_obj > __this = new Hole_obj();
	__this->__construct(__o_X,__o_Y);
	return __this;
}

hx::ObjectPtr< Hole_obj > Hole_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y) {
	Hole_obj *__this = (Hole_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Hole_obj), true, "Hole"));
	*(void **)__this = Hole_obj::_hx_vtable;
	__this->__construct(__o_X,__o_Y);
	return __this;
}

Hole_obj::Hole_obj()
{
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Hole_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Hole_obj_sStaticStorageInfo = 0;
#endif

static void Hole_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Hole_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Hole_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Hole_obj::__mClass,"__mClass");
};

#endif

hx::Class Hole_obj::__mClass;

void Hole_obj::__register()
{
	hx::Object *dummy = new Hole_obj;
	Hole_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Hole","\x60","\xf5","\xeb","\x2f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Hole_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Hole_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Hole_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Hole_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Hole_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

