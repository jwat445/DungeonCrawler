// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_Obstacle
#include <Obstacle.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d0cdcf85d2e06b1a_14_new,"Obstacle","new",0xcbb8aae1,"Obstacle.new","Obstacle.hx",14,0xd7960baf)

void Obstacle_obj::__construct(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,::String Otype){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
            	HX_STACKFRAME(&_hx_pos_d0cdcf85d2e06b1a_14_new)
HXLINE(  15)		super::__construct(X,Y,null());
HXLINE(  17)		this->variant = Otype;
HXLINE(  19)		{
HXLINE(  19)			::String _g = this->variant;
HXDLIN(  19)			::String _hx_switch_0 = _g;
            			if (  (_hx_switch_0==HX_("rock",a5,e3,ae,4b)) ){
HXLINE(  22)				this->loadGraphic(HX_("assets/images/rock.png",0b,b2,62,8e),true,(int)32,(int)32,null(),null());
HXDLIN(  22)				goto _hx_goto_0;
            			}
            			if (  (_hx_switch_0==HX_("wood",2d,ff,fc,4e)) ){
HXLINE(  24)				this->loadGraphic(HX_("assets/images/rock.png",0b,b2,62,8e),true,(int)32,(int)32,null(),null());
HXDLIN(  24)				goto _hx_goto_0;
            			}
            			/* default */{
HXLINE(  26)				this->loadGraphic(HX_("assets/images/rock.png",0b,b2,62,8e),true,(int)32,(int)32,null(),null());
            			}
            			_hx_goto_0:;
            		}
HXLINE(  28)		this->set_immovable(true);
            	}

Dynamic Obstacle_obj::__CreateEmpty() { return new Obstacle_obj; }

void *Obstacle_obj::_hx_vtable = 0;

Dynamic Obstacle_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Obstacle_obj > _hx_result = new Obstacle_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Obstacle_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x0b6ffd77) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x2e105115 || inClassId==(int)0x6451af37;
	}
}


hx::ObjectPtr< Obstacle_obj > Obstacle_obj::__new(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,::String Otype) {
	hx::ObjectPtr< Obstacle_obj > __this = new Obstacle_obj();
	__this->__construct(__o_X,__o_Y,Otype);
	return __this;
}

hx::ObjectPtr< Obstacle_obj > Obstacle_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,::String Otype) {
	Obstacle_obj *__this = (Obstacle_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Obstacle_obj), true, "Obstacle"));
	*(void **)__this = Obstacle_obj::_hx_vtable;
	__this->__construct(__o_X,__o_Y,Otype);
	return __this;
}

Obstacle_obj::Obstacle_obj()
{
}

void Obstacle_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Obstacle);
	HX_MARK_MEMBER_NAME(variant,"variant");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Obstacle_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(variant,"variant");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Obstacle_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"variant") ) { return hx::Val( variant ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Obstacle_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"variant") ) { variant=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Obstacle_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("variant","\x85","\x40","\xe2","\xdc"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Obstacle_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(Obstacle_obj,variant),HX_HCSTRING("variant","\x85","\x40","\xe2","\xdc")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Obstacle_obj_sStaticStorageInfo = 0;
#endif

static ::String Obstacle_obj_sMemberFields[] = {
	HX_HCSTRING("variant","\x85","\x40","\xe2","\xdc"),
	::String(null()) };

static void Obstacle_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Obstacle_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Obstacle_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Obstacle_obj::__mClass,"__mClass");
};

#endif

hx::Class Obstacle_obj::__mClass;

void Obstacle_obj::__register()
{
	hx::Object *dummy = new Obstacle_obj;
	Obstacle_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Obstacle","\x6f","\xa6","\xb7","\x97");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Obstacle_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Obstacle_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Obstacle_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Obstacle_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Obstacle_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Obstacle_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

