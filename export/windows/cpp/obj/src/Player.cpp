// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_16_new,"Player","new",0x8d5554f3,"Player.new","Player.hx",16,0xa27fc9dd)
static const int _hx_array_data_6c4d5f81_1[] = {
	(int)3,(int)4,(int)3,(int)5,
};
static const int _hx_array_data_6c4d5f81_2[] = {
	(int)6,(int)7,(int)6,(int)8,
};
static const int _hx_array_data_6c4d5f81_3[] = {
	(int)0,(int)1,(int)0,(int)2,
};
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_44_update,"Player","update",0xf1f8df56,"Player.update","Player.hx",44,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_51_movement,"Player","movement",0x91ad8bbc,"Player.movement","Player.hx",51,0xa27fc9dd)
static const int _hx_array_data_6c4d5f81_6[] = {
	(int)87,
};
static const int _hx_array_data_6c4d5f81_7[] = {
	(int)83,
};
static const int _hx_array_data_6c4d5f81_8[] = {
	(int)65,
};
static const int _hx_array_data_6c4d5f81_9[] = {
	(int)68,
};
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_108_animate,"Player","animate",0xa447a4b4,"Player.animate","Player.hx",108,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_123_shoot,"Player","shoot",0x70019132,"Player.shoot","Player.hx",123,0xa27fc9dd)
static const int _hx_array_data_6c4d5f81_12[] = {
	(int)38,
};
static const int _hx_array_data_6c4d5f81_13[] = {
	(int)40,
};
static const int _hx_array_data_6c4d5f81_14[] = {
	(int)37,
};
static const int _hx_array_data_6c4d5f81_15[] = {
	(int)39,
};

void Player_obj::__construct( ::Dynamic __o_X, ::Dynamic __o_Y){
 ::Dynamic X = __o_X.Default(0);
 ::Dynamic Y = __o_Y.Default(0);
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_16_new)
HXLINE(  18)		this->speed = ((Float)200);
HXLINE(  24)		super::__construct(X,Y,null());
HXLINE(  26)		this->loadGraphic(HX_("assets/images/player.png",87,88,81,c6),true,(int)32,(int)32,null(),null());
HXLINE(  27)		::haxe::IMap_obj::set(this->_facingFlip,(int)1, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),false)
            			->setFixed(1,HX_("y",79,00,00,00),false)));
HXLINE(  28)		::haxe::IMap_obj::set(this->_facingFlip,(int)16, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),true)
            			->setFixed(1,HX_("y",79,00,00,00),false)));
HXLINE(  30)		this->animation->add(HX_("lr",86,5e,00,00),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_1,4),(int)6,false,null(),null());
HXLINE(  31)		this->animation->add(HX_("u",75,00,00,00),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_2,4),(int)6,false,null(),null());
HXLINE(  32)		this->animation->add(HX_("d",64,00,00,00),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_3,4),(int)6,false,null(),null());
HXLINE(  34)		this->_sndStep = ::flixel::FlxG_obj::sound->load(HX_("assets/sounds/step_2.wav",5c,99,3c,2a),null(),null(),null(),null(),null(),null(),null());
HXLINE(  36)		 ::flixel::math::FlxPoint _hx_tmp = this->drag;
HXDLIN(  36)		_hx_tmp->set_x(this->drag->set_y((int)900));
HXLINE(  37)		this->setSize((int)16,(int)28);
HXLINE(  38)		this->offset->set((int)8,(int)4);
HXLINE(  40)		this->bulletDelay = (int)10;
            	}

Dynamic Player_obj::__CreateEmpty() { return new Player_obj; }

void *Player_obj::_hx_vtable = 0;

Dynamic Player_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Player_obj > _hx_result = new Player_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Player_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x0b6ffd77) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x2e105115 || inClassId==(int)0x6c4d5f81;
	}
}

void Player_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_44_update)
HXLINE(  45)		this->movement();
HXLINE(  46)		this->shoot();
HXLINE(  47)		this->super::update(elapsed);
            	}


void Player_obj::movement(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_51_movement)
HXLINE(  52)		bool walk_up = false;
HXLINE(  53)		bool walk_down = false;
HXLINE(  54)		bool walk_left = false;
HXLINE(  55)		bool walk_right = false;
HXLINE(  57)		walk_up = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_6,1),(int)1);
HXLINE(  58)		walk_down = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_7,1),(int)1);
HXLINE(  59)		walk_left = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_8,1),(int)1);
HXLINE(  60)		walk_right = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_9,1),(int)1);
HXLINE(  62)		bool _hx_tmp;
HXDLIN(  62)		if (walk_up) {
HXLINE(  62)			_hx_tmp = walk_down;
            		}
            		else {
HXLINE(  62)			_hx_tmp = false;
            		}
HXDLIN(  62)		if (_hx_tmp) {
HXLINE(  63)			walk_down = false;
HXDLIN(  63)			walk_up = walk_down;
            		}
HXLINE(  64)		bool _hx_tmp1;
HXDLIN(  64)		if (walk_left) {
HXLINE(  64)			_hx_tmp1 = walk_right;
            		}
            		else {
HXLINE(  64)			_hx_tmp1 = false;
            		}
HXDLIN(  64)		if (_hx_tmp1) {
HXLINE(  65)			walk_right = false;
HXDLIN(  65)			walk_left = walk_right;
            		}
HXLINE(  67)		bool _hx_tmp2;
HXDLIN(  67)		bool _hx_tmp3;
HXDLIN(  67)		bool _hx_tmp4;
HXDLIN(  67)		if (!(walk_up)) {
HXLINE(  67)			_hx_tmp4 = walk_down;
            		}
            		else {
HXLINE(  67)			_hx_tmp4 = true;
            		}
HXDLIN(  67)		if (!(_hx_tmp4)) {
HXLINE(  67)			_hx_tmp3 = walk_left;
            		}
            		else {
HXLINE(  67)			_hx_tmp3 = true;
            		}
HXDLIN(  67)		if (!(_hx_tmp3)) {
HXLINE(  67)			_hx_tmp2 = walk_right;
            		}
            		else {
HXLINE(  67)			_hx_tmp2 = true;
            		}
HXDLIN(  67)		if (_hx_tmp2) {
HXLINE(  69)			Float mA = (int)0;
HXLINE(  70)			if (walk_up) {
HXLINE(  72)				mA = (int)-90;
HXLINE(  73)				if (walk_left) {
HXLINE(  74)					mA = (mA - (int)45);
            				}
            				else {
HXLINE(  75)					if (walk_right) {
HXLINE(  76)						mA = (mA + (int)45);
            					}
            				}
HXLINE(  77)				this->set_facing((int)256);
            			}
            			else {
HXLINE(  79)				if (walk_down) {
HXLINE(  81)					mA = (int)90;
HXLINE(  82)					if (walk_left) {
HXLINE(  83)						mA = (mA + (int)45);
            					}
            					else {
HXLINE(  84)						if (walk_right) {
HXLINE(  85)							mA = (mA - (int)45);
            						}
            					}
HXLINE(  86)					this->set_facing((int)4096);
            				}
            				else {
HXLINE(  88)					if (walk_left) {
HXLINE(  90)						mA = (int)180;
HXLINE(  91)						this->set_facing((int)1);
            					}
            					else {
HXLINE(  93)						if (walk_right) {
HXLINE(  95)							mA = (int)0;
HXLINE(  96)							this->set_facing((int)16);
            						}
            					}
            				}
            			}
HXLINE(  99)			this->_sndStep->play(null(),null(),null());
HXLINE( 100)			this->velocity->set(this->speed,(int)0);
HXLINE( 101)			 ::flixel::math::FlxPoint _hx_tmp5 = this->velocity;
HXDLIN( 101)			 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 101)			point->_inPool = false;
HXDLIN( 101)			 ::flixel::math::FlxPoint point1 = point;
HXDLIN( 101)			point1->_weak = true;
HXDLIN( 101)			_hx_tmp5->rotate(point1,mA);
HXLINE( 102)			this->animate();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,movement,(void))

void Player_obj::animate(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_108_animate)
HXDLIN( 108)		if ((this->touching == (int)0)) {
HXLINE( 110)			int _g = this->facing;
HXDLIN( 110)			switch((int)(_g)){
            				case (int)1: case (int)16: {
HXLINE( 113)					this->animation->play(HX_("lr",86,5e,00,00),null(),null(),null());
            				}
            				break;
            				case (int)256: {
HXLINE( 115)					this->animation->play(HX_("u",75,00,00,00),null(),null(),null());
            				}
            				break;
            				case (int)4096: {
HXLINE( 117)					this->animation->play(HX_("d",64,00,00,00),null(),null(),null());
            				}
            				break;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,animate,(void))

bool Player_obj::shoot(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_123_shoot)
HXLINE( 124)		bool shoot_up = false;
HXLINE( 125)		bool shoot_down = false;
HXLINE( 126)		bool shoot_left = false;
HXLINE( 127)		bool shoot_right = false;
HXLINE( 129)		shoot_up = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_12,1),(int)1);
HXLINE( 130)		shoot_down = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_13,1),(int)1);
HXLINE( 131)		shoot_left = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_14,1),(int)1);
HXLINE( 132)		shoot_right = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_15,1),(int)1);
HXLINE( 134)		bool _hx_tmp;
HXDLIN( 134)		if (shoot_up) {
HXLINE( 134)			_hx_tmp = shoot_down;
            		}
            		else {
HXLINE( 134)			_hx_tmp = false;
            		}
HXDLIN( 134)		if (_hx_tmp) {
HXLINE( 135)			shoot_down = false;
HXDLIN( 135)			shoot_up = shoot_down;
            		}
HXLINE( 136)		bool _hx_tmp1;
HXDLIN( 136)		if (shoot_left) {
HXLINE( 136)			_hx_tmp1 = shoot_right;
            		}
            		else {
HXLINE( 136)			_hx_tmp1 = false;
            		}
HXDLIN( 136)		if (_hx_tmp1) {
HXLINE( 137)			shoot_right = false;
HXDLIN( 137)			shoot_left = shoot_right;
            		}
HXLINE( 139)		bool _hx_tmp2;
HXDLIN( 139)		bool _hx_tmp3;
HXDLIN( 139)		bool _hx_tmp4;
HXDLIN( 139)		if (!(shoot_up)) {
HXLINE( 139)			_hx_tmp4 = shoot_down;
            		}
            		else {
HXLINE( 139)			_hx_tmp4 = true;
            		}
HXDLIN( 139)		if (!(_hx_tmp4)) {
HXLINE( 139)			_hx_tmp3 = shoot_left;
            		}
            		else {
HXLINE( 139)			_hx_tmp3 = true;
            		}
HXDLIN( 139)		if (!(_hx_tmp3)) {
HXLINE( 139)			_hx_tmp2 = shoot_right;
            		}
            		else {
HXLINE( 139)			_hx_tmp2 = true;
            		}
HXDLIN( 139)		if (_hx_tmp2) {
HXLINE( 141)			if (shoot_up) {
HXLINE( 143)				this->set_facing((int)256);
            			}
            			else {
HXLINE( 145)				if (shoot_down) {
HXLINE( 147)					this->set_facing((int)4096);
            				}
            				else {
HXLINE( 149)					if (shoot_left) {
HXLINE( 151)						this->set_facing((int)1);
            					}
            					else {
HXLINE( 153)						if (shoot_right) {
HXLINE( 155)							this->set_facing((int)16);
            						}
            					}
            				}
            			}
HXLINE( 157)			this->animate();
HXLINE( 158)			return true;
            		}
HXLINE( 160)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,shoot,return )


hx::ObjectPtr< Player_obj > Player_obj::__new( ::Dynamic __o_X, ::Dynamic __o_Y) {
	hx::ObjectPtr< Player_obj > __this = new Player_obj();
	__this->__construct(__o_X,__o_Y);
	return __this;
}

hx::ObjectPtr< Player_obj > Player_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic __o_X, ::Dynamic __o_Y) {
	Player_obj *__this = (Player_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Player_obj), true, "Player"));
	*(void **)__this = Player_obj::_hx_vtable;
	__this->__construct(__o_X,__o_Y);
	return __this;
}

Player_obj::Player_obj()
{
}

void Player_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Player);
	HX_MARK_MEMBER_NAME(speed,"speed");
	HX_MARK_MEMBER_NAME(_sndStep,"_sndStep");
	HX_MARK_MEMBER_NAME(bulletDelay,"bulletDelay");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Player_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(speed,"speed");
	HX_VISIT_MEMBER_NAME(_sndStep,"_sndStep");
	HX_VISIT_MEMBER_NAME(bulletDelay,"bulletDelay");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Player_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { return hx::Val( speed ); }
		if (HX_FIELD_EQ(inName,"shoot") ) { return hx::Val( shoot_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"animate") ) { return hx::Val( animate_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_sndStep") ) { return hx::Val( _sndStep ); }
		if (HX_FIELD_EQ(inName,"movement") ) { return hx::Val( movement_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bulletDelay") ) { return hx::Val( bulletDelay ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Player_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { speed=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_sndStep") ) { _sndStep=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bulletDelay") ) { bulletDelay=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Player_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("speed","\x87","\x97","\x69","\x81"));
	outFields->push(HX_HCSTRING("_sndStep","\xd6","\x78","\x65","\xae"));
	outFields->push(HX_HCSTRING("bulletDelay","\xe1","\x45","\x00","\x8a"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Player_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Player_obj,speed),HX_HCSTRING("speed","\x87","\x97","\x69","\x81")},
	{hx::fsObject /*::flixel::_hx_system::FlxSound*/ ,(int)offsetof(Player_obj,_sndStep),HX_HCSTRING("_sndStep","\xd6","\x78","\x65","\xae")},
	{hx::fsInt,(int)offsetof(Player_obj,bulletDelay),HX_HCSTRING("bulletDelay","\xe1","\x45","\x00","\x8a")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Player_obj_sStaticStorageInfo = 0;
#endif

static ::String Player_obj_sMemberFields[] = {
	HX_HCSTRING("speed","\x87","\x97","\x69","\x81"),
	HX_HCSTRING("_sndStep","\xd6","\x78","\x65","\xae"),
	HX_HCSTRING("bulletDelay","\xe1","\x45","\x00","\x8a"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("movement","\x2f","\x85","\x37","\x00"),
	HX_HCSTRING("animate","\xa1","\xda","\x4c","\x7a"),
	HX_HCSTRING("shoot","\xdf","\x81","\x27","\x7c"),
	::String(null()) };

static void Player_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Player_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Player_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Player_obj::__mClass,"__mClass");
};

#endif

hx::Class Player_obj::__mClass;

void Player_obj::__register()
{
	hx::Object *dummy = new Player_obj;
	Player_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Player","\x81","\x5f","\x4d","\x6c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Player_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Player_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Player_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Player_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Player_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Player_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

