// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#ifndef INCLUDED_Hole
#define INCLUDED_Hole

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
HX_DECLARE_CLASS0(Hole)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)



class HXCPP_CLASS_ATTRIBUTES Hole_obj : public  ::flixel::FlxSprite_obj
{
	public:
		typedef  ::flixel::FlxSprite_obj super;
		typedef Hole_obj OBJ_;
		Hole_obj();

	public:
		enum { _hx_ClassId = 0x2febf560 };

		void __construct(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Hole")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"Hole"); }
		static hx::ObjectPtr< Hole_obj > __new(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y);
		static hx::ObjectPtr< Hole_obj > __alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Hole_obj();

		HX_DO_RTTI_ALL;
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Hole","\x60","\xf5","\xeb","\x2f"); }

};


#endif /* INCLUDED_Hole */ 
