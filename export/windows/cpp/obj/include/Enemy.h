// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#ifndef INCLUDED_Enemy
#define INCLUDED_Enemy

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
HX_DECLARE_CLASS0(Bullet)
HX_DECLARE_CLASS0(Enemy)
HX_DECLARE_CLASS0(FSM)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,math,FlxPoint)
HX_DECLARE_CLASS2(flixel,_hx_system,FlxSound)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(flixel,util,IFlxPooled)



class HXCPP_CLASS_ATTRIBUTES Enemy_obj : public  ::flixel::FlxSprite_obj
{
	public:
		typedef  ::flixel::FlxSprite_obj super;
		typedef Enemy_obj OBJ_;
		Enemy_obj();

	public:
		enum { _hx_ClassId = 0x03a88228 };

		void __construct(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,::String Etype);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Enemy")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"Enemy"); }
		static hx::ObjectPtr< Enemy_obj > __new(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,::String Etype);
		static hx::ObjectPtr< Enemy_obj > __alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,::String Etype);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Enemy_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Enemy","\x28","\x82","\xa8","\x03"); }

		Float speed;
		::String variant;
		 ::FSM _brain;
		Float _idleTmr;
		Float _moveDir;
		bool seesPlayer;
		 ::flixel::math::FlxPoint playerPos;
		 ::flixel::_hx_system::FlxSound _sndStep;
		 ::flixel::_hx_system::FlxSound _sndShoot;
		int bulletDelay;
		void draw();

		virtual void idle();
		::Dynamic idle_dyn();

		virtual void chase();
		::Dynamic chase_dyn();

		virtual bool shoot();
		::Dynamic shoot_dyn();

		void damage( ::Bullet bulletRef);
		::Dynamic damage_dyn();

		void update(Float elapsed);

};


#endif /* INCLUDED_Enemy */ 
